# Точка с запятой
# Напишите программу, которая разбивает строку по символам точки, запятой и точки с запятой.

# Формат входных данных
# На вход программе подается строка, содержащая различные значения, разделенные символами точки
# ., запятой , или точки с запятой ;, вокруг которых могут располагаться пробелы.

# Формат выходных данных
# Программа должна разбить введенную строку по символам точки, запятой и точки с запятой,
# захватывая вокруг стоящие пробелы, и вывести все значения, полученные при разбиении, через
# пробел.

from re import split


print(*split(r'\s*[.,;]\s*', input()))



# Логическое выражение
# Дано логические выражения, состоящее из переменных, а также операторов |, &, and или or.
# Напишите программу, которая разбивает данную строку по указанным операторам.

# Формат входных данных
# На вход программе подается строка, содержащая логическое выражение, которое состоит из
# переменных и операторов |, &, and или or, между которыми могут располагаться пробелы.

# Формат  выходных данных
# Программа должна разбить введенную строку по указанным логическим операторам, захватывая
# вокруг стоящие пробелы, и вывести все значения, полученные при разбиении, через запятую и
# пробел.

from re import split


print(', '.join(split(r'\s*(?:[|&]|and|or)\s*', input())))



# Функция multiple_split()
# Реализуйте функцию multiple_split(), которая принимает два аргумента:

# string — строка
# delimiters — список строк

# Функция должна разбивать строку string на подстроки, используя в качестве разделителей строки
# из списка delimiters, и возвращать полученный результат в виде списка.

# Примечание 1. Другими словами, функция multiple_split() должна работать аналогично строковому
# методу split(), за тем исключением, что delimiters может содержать не единственный разделитель,
# а целый набор разделителей.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию
# multiple_split(), но не код, вызывающий ее.

from re import split, escape


def multiple_split(string, delimiters):
    split_delimiters = []
    for elem in delimiters:
        split_delimiters.append(escape(elem))
    join_delimiters = '|'.join(split_delimiters)
    return split(rf'{join_delimiters}', string)



# Сумма чисел
# Напишите программу, которая складывает все натуральные числа в строке, находящиеся в
# указанном диапазоне индексов.

# Формат входных данных
# На вход программе сначала подаются два целых положительных числа aa и bb, разделенные
# пробелом, а затем — строка.

# Формат выходных данных
# Программа должна вывести сумму всех натуральных чисел в введенной строке, находящихся в
# диапазоне индексов от a (включительно) до b (не включительно). Если в указанном диапазоне
# нет ни одного числа, программа должна вывести 0.

# Примечание 1. Натуральным числом будем считать последовательность символов, соответствующих
# \d, окруженную символами, соответствующими \D.

from re import compile, findall


pos, endpos = map(int, input().split())
regex = compile('\d+')
all_digits = regex.findall(input(), pos, endpos)
print(sum(map(int, all_digits)))