# Письмо для экзамена
# Напишите функцию generate_letter(), которая будет собирать электронное письмо в
# соответствии с шаблоном:

# To: <mail>
# Приветствую, <name>!
# Вам назначен экзамен, который пройдет <date>, в <time>.
# По адресу: <place>. 
# Экзамен будет проводить <teacher> в кабинете <number>. 
# Желаем удачи на экзамене!
# Функция должна получать на вход пять обязательных аргументов mail, name, date, time,
# place и два необязательных teacher, number и возвращать текст готового письма. При
# отсутствии аргумента teacher учителем будет Тимур Гуев, а если нет аргумента number,
# то кабинет будет 1717.

# Примечание 1. Следующий программный код:

# print(generate_letter('lara@yandex.ru', 'Лариса', '10 декабря', '12:00', 'Часова 23,
# корпус 2'))
# print()
# print(generate_letter('lara@yandex.ru', 'Лариса', '10 декабря', '12:00', 'Часова 23,
# корпус 2', 'Василь Ярошевич', 23))
# должен выводить:

# To: lara@yandex.ru
# Приветствую, Лариса!
# Вам назначен экзамен, который пройдет 10 декабря, в 12:00.
# По адресу: Часова 23, корпус 2. 
# Экзамен будет проводить Тимур Гуев в кабинете 17. 
# Желаем удачи на экзамене!

# To: lara@yandex.ru
# Приветствую, Лариса!
# Вам назначен экзамен, который пройдет 10 декабря, в 12:00.
# По адресу: Часова 23, корпус 2. 
# Экзамен будет проводить Василь Ярошевич в кабинете 23. 
# Желаем удачи на экзамене!
# Примечание 2. Вызывать функцию generate_letter() не нужно, требуется только реализовать.

def generate_letter(mail, name, date, time, place, teacher='Тимур Гуев', number=17):
    return f"""To: {mail}
Приветствую, {name}!
Вам назначен экзамен, который пройдет {date}, в {time}.
По адресу: {place}.
Экзамен будет проводить {teacher} в кабинете {number}.
Желаем удачи на экзамене!"""



# Pretty print
# Напишите функцию pretty_print(), которая выводит содержимое списка с рамкой. 

# Функция должна получать на вход один обязательный аргумент data – список, который
# следует вывести и два необязательных строковых односимвольных  аргумента side и
# delimiter и выводить содержимое списка в соответствии с примерами.

# В случае если отсутствует аргумент side, то полагаем side='-', а если отсутствует
# аргумент delimiter, то полагаем delimiter='|'.

# Примечание 1. Следующий программный код:

# pretty_print([1, 2, 10, 23, 123, 3000])
# pretty_print(['abc', 'def', 'ghi', '12345'])
# pretty_print(['abc', 'def', 'ghi'], side='*')
# pretty_print(['abc', 'def', 'ghi'], delimiter='#')
# pretty_print(['abc', 'def', 'ghi'], side='*', delimiter='#')
# должен выводить:

#  ------------------------------ 
# | 1 | 2 | 10 | 23 | 123 | 3000 |
#  ------------------------------ 
#  ------------------------- 
# | abc | def | ghi | 12345 |
#  ------------------------- 
#  ***************** 
# | abc | def | ghi |
#  ***************** 
#  ----------------- 
# # abc # def # ghi #
#  ----------------- 
#  ***************** 
# # abc # def # ghi #
#  ***************** 

from functools import reduce

def pretty_print(data, side='-', delimiter='|'):
    reduce_result = reduce(lambda result, item: str(result) + ' ' + delimiter + ' ' + str(item), data)
    print(f' {side*(len(reduce_result)+2)} ')
    print(f'| {reduce_result} |')
    print(f' {side*(len(reduce_result)+2)} ')