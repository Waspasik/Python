# Схожие буквы
# В русском и английском языках есть буквы, которые выглядят одинаково. Вот список
# английских букв "AaBCcEeHKMOoPpTXxy", а вот их русские аналоги "АаВСсЕеНКМОоРрТХху".
# Напишите программу, которая для трёх букв из данных списков букв определяет, русские
# они, английские или и те и другие (смесь русских и английских букв).

# Формат входных данных
# На вход программе подаются три буквы из указанных в условии наборов букв, каждая на
# отдельной строке.

# Формат выходных данных
# Программа должна вывести

# ru, если все три буквы русские
# en, если все три буквы английские
# mix, если среди букв есть как русские, так и английские

# Примечание 1. Гарантируется, что введенные три буквы находятся в наборе
# "AaBCcEeHKMOoPpTXxy" + "АаВСсЕеНКМОоРрТХху" (английские + русские буквы).

def similar_letters(letters):
    en, ru = 'AaBCcEeHKMOoPpTXxy', 'АаВСсЕеНКМОоРрТХху'
    result = {}
    
    for letter in letters:
        if letter in en and letter not in ru:
            result['en'] = result.get('en', 0) + 1
        else:
            result['ru'] = result.get('ru', 0) + 1

    for key, value in result.items():
        if value == 3:
            return key
        else:
            return 'mix'

letters = [input() for _ in range(3)]
print(similar_letters(letters))



# Переворатор
# Дана последовательность натуральных чисел от 1 до n. Напишите программу, которая
# сначала располагает в обратном порядке часть элементов этой последовательности от
# элемента с номером X до элемента с номером Y, а затем от элемента с номером A
# до элемента с номером B.

# Формат входных данных
# На вход программе подаются 5 натуральных чисел, разделенных пробелом:
# n, X, Y, A, B, (X < Y, A < B, 1 ≤ X, Y, A, B ≤ n).

# Формат выходных данных
# Программа должна сформировать последовательность чисел, согласно условию задачи, и
# вывести их, разделяя пробелом.

# Примечание 1. Нумерация членов последовательности начинается с единицы.

# Примечание 2. Рассмотрим первый тест, в котором n=9, X=2, Y=5, A=6, B=9. Запишем
# последовательность от 1 до 9:
# 1, 2, 3, 4, 5, 6, 7, 8, 9

# Перевернем в этой последовательности сначала элементы со 2 по 5 (2, 3, 4, 5), затем
# с 6 по 9 (6, 7, 8, 9). Получим искомую последовательность:
# 1, 5, 4, 3, 2, 9, 8, 7, 6

n, x, y, a, b = [int(num) for num in input().split()]
numbers = [i for i in range(1, n+1)]
numbers[x-1:y] = list(reversed(numbers[x-1:y]))
numbers[a-1:b] = list(reversed(numbers[a-1:b]))
print(*numbers)



# Более одного
# Дана последовательность неотрицательных целых чисел. Напишите программу, которая
# выводит те числа, которые встречаются в данной последовательности более одного раза.

# Формат входных данных
# На вход программе подается строка, содержащая целые неотрицательные числа, разделенные
# пробелом.

# Формат выходных данных
# Программа должна вывести те числа, которые встречаются в данной строке более одного
# раза, разделяя их пробелом. Числа должны быть расположены в порядке возрастания и не
# должны повторяться.

# Примечание 1. Если повторяющихся чисел в исходной строке нет, программа ничего не
# должна выводить.

numbers = [int(num) for num in input().split()]
numbers_dict = {}

for num in numbers:
    numbers_dict[str(num)] = numbers_dict.get(str(num), 0) + 1

result = []

for key, value in numbers_dict.items():
    if value > 1:
        result.append(int(key))

print(*sorted(result))