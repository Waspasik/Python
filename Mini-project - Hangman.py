from random import*

print('–í—Å–µ–º –ö—É, –≥–∞–π–∑!', '–û–ª–¥—ã –Ω–∞ –º–µ—Å—Ç–µ üòé.', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ü–æ–¥–≤–µ—Å—å –ü–∞–ø–∏—á–∞".')
word_list = ['–ø–∞–ø–∏—á', '–º–∏–∫—Ä–æ—á–µ–ª–∏–∫', '–≤–µ–ª–∏—á–∞–π—à–∏–π', '–ø–æ–º–æ–π–∫–∞', '—Ä–∞–±–æ—Ç—è–≥–∏', '–±–æ–≥–¥–∞–Ω', '–≤–∏–∫–∞', '—Ç–≤–∞—Ä—ã–Ω–∞', '—Å–æ–ª—è–Ω–æ–≥–æ', '–Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ', '–æ—á–µ—Ä–µ–¥–Ω—è—Ä–∞']

def get_word():
    return choice(word_list).upper()
    
def display_hangman(tries):
    stages = [  # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–∞–ø–∏—á–∞: –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–±–µ –Ω–æ–≥–∏ 
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–¥–Ω–∞ –Ω–æ–≥–∞
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å –∏ –æ–¥–Ω–∞ —Ä—É–∫–∞
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞ –∏ —Ç–æ—Ä—Å
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–∞–ø–∏—á–∞
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return print(stages[tries])

def wish_word_check(word):
    upper_rus_alphabet = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
    true_value = 0
    while True:
        for i in range(len(word)):
            if word[i].upper() in upper_rus_alphabet:
                true_value += 1
        if true_value == len(word):
            return True
        else:
            print('–í–≤–µ–¥–∏ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π')
            continue

def play(word):
    word_completion = '_' * len(word)
    guessed = True
    guessed_letters = []
    guessed_words = []
    tries = 6
    if word == word_list[0].upper():
        print('–≠—Ç–æ –≤–µ–ª–∏—á–∞–π—à–∏–π –∏–≥—Ä–æ–∫, –Ω–µ–ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ ‚Ññ 1 –≤ DOTA 2, –±—Ä–∏–≥–∞–¥–∏—Ä —Ä–∞–±–æ—Ç—è–≥.')
    elif word == word_list[1].upper():
        print('–ü–∞–ø–∏—á —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–µ–ª–∫–æ–µ –∏ —Ç–æ, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞.')
    elif word == word_list[2].upper():
        print('–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏—Ç—É–ª –ü–∞–ø–∏—á–∞.')
    elif word == word_list[3].upper():
        print('–î–æ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –ü–∞–ø–∏—á –ø—Ä–∏–¥—É–º–∞–ª –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–∞–º–æ–µ –¥–Ω–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.')
    elif word == word_list[4].upper():
        print('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏ –ü–∞–ø–∏—á–∞. –ö–∞–∂–¥—ã–π –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º—å—é–Ω–∏—Ç–∏ –≥–æ—Ä–¥–æ –Ω–æ—Å–∏—Ç –∑–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç—Ä—É–¥–æ–ª—é–±–∏–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.')
    elif word == word_list[5].upper():
        print('–ö—É–ª—å—Ç–æ–≤—ã–π, –Ω–æ –º–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂. –ü–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–æ–≤, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç—è–≥–∞ —Å–∫–∏–Ω—É–ª –¥–æ–Ω–∞—Ç –∑ —Ä–æ—Ñ–ª–æ–º –ø—Ä–æ –Ω–µ–∫–æ–µ–≥–æ "–¥—è–¥—é". –ü–∞–ø–∞–Ω—è –±—É—Ä–Ω–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ –≥–æ–º–æ—Ñ–æ–±—ã—á–∞—Ö.')
    elif word == word_list[6].upper():
        print('–§–∞–≤–æ—Ä–∏—Ç–∫–∞ –ü–∞–ø–∏—á–∞.')
    elif word == word_list[7].upper():
        print('–≠—Ç–æ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ –∫–∞–∫ "–∂–∏–≤–æ—Ç–Ω–æ–µ". –ü–ª—é—Å, –æ–Ω–æ —Ö–æ—Ä–æ—à–æ –∑–≤—É—á–∏—Ç, –ø–æ—ç—Ç–æ–º—É –ü–∞–ø–∏—á –≤–∑—è–ª —Å–µ–±–µ —ç—Ç–æ —Å–ª–æ–≤–æ.')
    elif word == word_list[8].upper():
        print('–ö—É–ª—å—Ç–æ–≤—ã–π –±–æ–µ–≤—ã–π –∫—Ä–∏–∫ –í–µ–ª–∏—á–∞–π—à–µ–≥–æ. –û–∑–Ω–∞—á–∞–µ—Ç - –≤ —Å–æ–ª–æ - –≤ –æ–¥–Ω–æ–≥–æ - –≤ –æ–¥–∏–Ω–æ—á–∫—É. –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ "–≤" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
    elif word == word_list[9].upper():
        print('–ö–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ü–∞–ø–∏—á –ø—Ä–æ–∏–≥—Ä–∞–ª —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–≤–æ–π "–æ—Å—Ç—Ä–æ–π —É–º" –∏–ª–∏ –∫—Ä–∏–≤—ã–µ –ø–∞–ª—å—Ü—ã, —Ç–æ –æ–Ω –æ—Ä–µ—Ç - ... .')
    elif word == word_list[10].upper():
        print('–¢–∞–∫ –í–µ–ª–∏—á–∞–π—à–∏–π –Ω–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ –≤–æ–ª–µ —Å—É–¥—å–±—ã –ø–æ–ø–∞–ª—Å—è –ü–∞–ø–∏—á—É –ø–æ–¥ –Ω–æ–∂.')
    display_hangman(tries)
    print(word_completion)

    while tries > 0 or guessed == False:
        wish_word = input('–í–≤–µ–¥–∏ –æ–¥–Ω—É –±—É–∫–≤—É –∏–ª–∏ —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç \n').upper()
        while wish_word.isalpha() == False or wish_word in guessed_letters or wish_word in guessed_words:
            wish_word = input('–¢—ã –Ω–∞ —Ä–æ—Ñ–ª–∞–Ω–∞—Ö? –í–≤–µ–¥–∏ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–µ–±–∏–ª—ã—á. \n').upper()
        if len(wish_word) == 1 and wish_word in word:
            for i in range(len(word)):
                if word[i] == wish_word:
                    word_completion = word_completion[:i] + wish_word + word_completion[i + 1:]
            guessed_letters.append(wish_word)
            display_hangman(tries)
            print(word_completion)
            if word_completion == word:
                guessed = True
                print('–¢—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—à—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å—ã–Ω –º–æ–π, - –Ω–∏–∫—Ç–æ –Ω–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ–∫–∞ —è –∂–∏–≤.')
                break
        elif len(wish_word) == 1 and wish_word not in word:
            guessed_letters.append(wish_word)
            tries -= 1
            print('–°—ã–Ω –±–ª—è–¥–∏, —É–±–∏—Ç—å –ª—É—á—à–µ–≥–æ –≤ –º–∏—Ä–µ –∑–∞–¥—É–º–∞–ª!')
            display_hangman(tries)
            print(word_completion)
        elif len(wish_word) == len(word):
            if wish_word == word:
                display_hangman(tries)
                print(wish_word)
                print('–ò —á—Ç–æ, –®–µ–π–∫–µ—Ä, —É –º–µ–Ω—è –µ—Å—Ç—å –∂–∏–∑–Ω—å. –Ø –Ω–µ —É–º—Ä—É. –Ø –±—É–¥—É –∂–∏—Ç—å –≤–µ—á–Ω–æ!')
                guessed = True
                break
            else:
                guessed_words.append(wish_word)
                tries -= 1
                print('–ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ! –¢–≤–∞—Ä–∏! –ñ–∏–≤–æ—Ç–Ω—ã–µ! –°—ã–Ω–æ–≤—å—è —à–ª—é—Ö!')
                display_hangman(tries)
                print(word_completion)
                guessed = False
        elif len(wish_word) > len(word):
            guessed_words.append(wish_word)
            tries -= 1
            print('–ù–µ –Ω–∞–¥–æ, –¥—è–¥—è!')
            display_hangman(tries)
            print(word_completion)
            guessed = False
    if tries == 0:
        print('–ù–æ–ª—å –ø–æ–º–æ—â–∏.')

while True:
    play(get_word())
    continue_game = input('–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å —Å—á–∞—Å—Ç—å–µ –∏ —Å–ø–∞—Å—Ç–∏ –ü–∞–ø–∏–∑–∏ –æ—Ç –≤–µ—Ä–Ω–æ–π –≥–∏–±–µ–ª–∏? –í–≤–µ–¥–∏ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç". \n').lower()
    if continue_game == '–¥–∞':
        continue
    else:
        break