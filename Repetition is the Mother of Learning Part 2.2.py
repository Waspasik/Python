# Максимальная группа
# Назовем набор различных натуральных чисел группой. Например: (13, 4, 22, 40).
# Тогда длиной группы будем считать количество чисел в группе. Например, длина
# группы (13, 4, 22, 40) равна 4.

# Дана последовательность натуральных чисел от 1 до n включительно. Напишите
# программу, которая группирует все числа данной последовательности по сумме
# их цифр и определяет длину группы, содержащей наибольшее количество чисел.

# Формат входных данных
# На вход программе подается натуральное число nn.

# Формат выходных данных
# Программа должна сгруппировать все числа из натуральной последовательности от
# 1 до n по сумме их цифр и определить длину группы, содержащей наибольшее
# количество чисел.

# Примечание 1. Рассмотрим третий тест, в котором n = 20. Запишем последовательность
# чисел от 1 до 20:
# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20

# Сгруппируем полученные числа по сумме их цифр:
# (1,10), (2,11, 20), (3,12), (4,13), (5, 14), (6, 15), (7, 16), (8, 17), (9, 18), (19)

# Итак, длина группы с наибольшим количеством чисел равна 3.

numbers = [i for i in range(1, int(input()) + 1)]
sorted_numbers = []

for num in numbers:
    sort_num = []
    for n in numbers:
        if sum(list(map(lambda digit: int(digit), str(n)))) == sum(list(map(lambda digit: int(digit), str(num)))):
            sort_num.append(n)
    sorted_numbers.append(sort_num)
    sort_num = []

print(len(max(sorted_numbers, key=len)))



# Трудности перевода
# Зачастую переводить сериалы, не теряя изначальный смысл, невозможно, особенно
# за счет игр слов. Сумасшедший режиссер хочет снять сериал, в котором бы в целях
# эксперимента задействовал как можно больше языков, чтобы пользоваться красотой
# каждого из них. Тем не менее если задействовать слишком много языков, то сериал
# станет непонятен абсолютно всем, поэтому режиссер достает случайных людей на
# улице и спрашивает их, какие языки они знают, таким образом он будет использовать
# языки которые знают все из них.

# Напишите программу, которая определяет, какие языки будут использоваться в сериале.

# Формат входных данных
# На вход программе в первой строке подается число nn — количество людей, которых
# донимает режиссер. В каждой из следующих nn строк через запятую указывается список
# языков, которые знает человек.

# Формат выходных данных
# Программа должна вывести список языков для сериала в лексикографическом порядке.
# Если такой список составить нельзя, необходимо вывести текст: 

# 'Сериал снять не удастся'


languages = [[lng for lng in input().split(', ')] for _ in range(int(input()))]
result = set(languages[0])

for i in range(len(languages)):
    result = result & set(languages[i])

result = ', '.join(sorted(list(result)))
print(result if bool(result) else 'Сериал снять не удастся')



# Схожие слова
# Напишите программу, которая находит все схожие слова для заданного слова. Слова
# называются схожими, если имеют одинаковое количество и расположение гласных букв.
# При этом сами гласные могут различаться.

# Формат входных данных
# На вход программе подается одно слово, записанное в первой строке, затем натуральное
# число n — количество слов для сравнения и n строк со словами.

# Формат выходных данных
# Программа должна вывести все схожие слова для заданного слова, сохранив их исходный
# порядок следования.

# Примечание 1. После последней гласной в начальном и проверяемом слове может быть
# любое количество согласных.

# Примечание 2. В русском языке 10 гласных букв (а, у, о, ы, и, э, я, ю, ё, е) и 21
# согласная буква (б, в, г, д, ж, з, й, к, л, м, н, п, р, с, т, ф, х, ц, ч, ш, щ).

rus_vowels = ['а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'ё', 'е']
main_word = input()
main_vowels_index = []

for i in range(len(main_word)):
    if main_word[i] in rus_vowels:
        main_vowels_index.append(i)

similar_words = []

for _ in range(int(input())):
    word = input()
    word_vowels_index = []
    for i in range(len(word)):
        if word[i] in rus_vowels:
            word_vowels_index.append(i)
    if main_vowels_index == word_vowels_index:
        similar_words.append(word)

print(*similar_words, sep='\n')