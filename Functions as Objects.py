# Дан список numbers, содержащий кортежи чисел. Напишите программу, которая с помощью
# встроенных функций min() и max() выводит те кортежи (каждый на отдельной строке),
# которые имеют минимальное и максимальное среднее арифметическое значение элементов.

# Примечание. Используйте необязательный аргумент key.

numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99),
          (89, 9, 34), (10, 20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5),
          (1, 2, 3, 4, 5, 6), (-9, 8, 4), (90, 1, -45, -21)]

def comparу_average(tpl):
    return sum(tpl) / len(tpl)

print(min(numbers, key=comparу_average))
print(max(numbers, key=comparу_average))



# Напишите программу, которая сортирует список points координат точек плоскости в соответствии
# с расстоянием от начала координат (точки (0 ; 0)). Программа должна вывести отсортированный
# список.

from math import*

points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]

def point_sorting(point):
    return sqrt(point[0]**2 + point[1]**2)
    
print(sorted(points, key=point_sorting))



# Дан список numbers, содержащий кортежи чисел. Напишите программу, которая сортирует и
# выводит список numbers в соответствии с суммой минимального и максимального элемента
# кортежа.

# Примечание 1. В этой задаче мы считаем, что кортеж (2, 1, 3) меньше кортежа (6, 4, 5),
# так как 1 + 3 < 4 + 6. При этом кортеж (1, 2, 9) равен кортежу (4, 5, 6), так как 1 + 9 = 4 + 6.

numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]

def sum_min_and_max_elements(elem):
    return min(elem) + max(elem)

print(sorted(numbers, key=sum_min_and_max_elements))



# Сортируй как хочешь
# Список athletes содержит сведения о спортсменах в виде кортежей: (имя, возраст, рост, вес).

# Напишите программу сортировки списка спортсменов по указанному полю:

# 1: по имени;
# 2: по возрасту;
# 3: по росту;
# 4: по весу.

# Формат входных данных
# На вход программе подается натуральное число от 1 до 4 – номер поля по которому требуется отсортировать список.

# Формат выходных данных
# Программа должна вывести отсортированный по заданному полю список в соответствии с примерами.

# Примечание. Решите задачу без использования условного оператора.

athletes = [('Дима', 10, 130, 35), ('Тимур', 11, 135, 39), ('Руслан', 9, 140, 33), ('Рустам', 10, 128, 30),
           ('Амир', 16, 170, 70), ('Рома', 16, 188, 100), ('Матвей', 17, 168, 68), ('Петя', 15, 190, 90)]

def sorting_athletes(athlete):
    return athlete[column_num-1]

column_num = int(input())
athletes.sort(key=sorting_athletes)

for athl in athletes:
    print(*athl)



# Математические функции
# Напишите программу, которая принимает число и название функции, а выводит результат применения
# функции к данному числу.

# Список возможных функций:

# квадрат: функция принимает число и возвращает его квадрат;
# куб: функция принимает число и возвращает его куб;
# корень: функция принимает число и возвращает корень квадратный из этого числа;
# модуль: функция принимает число и возвращает его модуль;
# синус: функция принимает число (в радианах) и возвращает синус этого числа.

# Формат входных данных
# На вход программе подается целое число и название функции, записанные на отдельных строках.

# Формат выходных данных
# Программа должна выдать результат применения функции к числу.

# Примечание. Решите задачу без использования условного оператора.

from math import*

def func_pow2(n):
    print(n**2)

def func_pow3(n):
    print(n**3)

def func_sqrt(n):
    print(sqrt(n))

def func_abs(n):
    print(abs(n))

def func_sin(n):
    print(sin(n))

commands = {'квадрат': func_pow2, 'куб': func_pow3, 'корень': func_sqrt, 'модуль': func_abs, 'синус': func_sin}

number = int(input())
func_name = input()
commands[func_name](number)



# Интересная сортировка-1
# На вход программе подается строка натуральных чисел. Из элементов строки формируется
# список чисел.

# Напишите программу сортировки списка чисел в порядке неубывания суммы их цифр. При этом,
# если два числа имеют одинаковую сумму цифр, следует сохранить их взаиморасположение в
# начальном списке.

# Формат входных данных
# На вход программе подается строка текста, содержащая натуральные числа, разделенные
# пробелами.

# Формат выходных данных
# Программа должна вывести отсортированный список чисел в соответствии с условием задачи,
# разделяя его элементы одним пробелом.

numbers = [n for n in input().split()]

def sorting_numbers(num):
    total = 0
    for i in range(len(num)):
        total += int(num[i])
    return total

print(*sorted(numbers, key=sorting_numbers))



# Интересная сортировка-2
# На вход программе подается строка натуральных чисел. Из элементов строки формируется
# список чисел.

# Напишите программу сортировки списка чисел в порядке неубывания суммы их цифр. При
# этом, если у двух чисел одинаковая сумма цифр, их следует вывести
# в порядке неубывания.

# Формат входных данных
# На вход программе подается строка текста, содержащая натуральные числа, разделенные
# пробелами.

# Формат выходных данных
# Программа должна вывести отсортированный список чисел в соответствии с условием задачи,
# разделяя его элементы одним пробелом.

numbers = [n for n in input().split()]

def sorting_numbers(num):
    total = 0
    for i in range(len(num)):
        total += int(num[i])
    return total, int(num)

print(*sorted(numbers, key=sorting_numbers))