# Функция power()
# Реализуйте функцию power(), которая принимает один аргумент:

# degree — целое число

# Функция power() должна возвращать функцию, которая принимает в качестве аргумента
# целое число x и возвращает значение x в степени degree.

# Примечание 1. Рассмотрим пример из первого теста. Вызов power(2) возвращает функцию,
# которая принимает в качестве аргумента число и возводит его во вторую степень.
# Функция присваивается переменной square. Далее полученная функция вызывается с
# аргументом 5 и возвращает значение 5^2 = 25 .

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию power(), но не код, вызывающий ее.

def power(degree):
    return lambda x: x**degree



# Функция generator_square_polynom()
# Рассмотрим семейство функций — квадратных трехчленов. Все эти функции имеют один и
# тот же вид:
# f(x) = ax^2 + bx + c

# Реализуйте функцию generator_square_polynom(), которая принимает три аргумента в
# следующем порядке:

# a — вещественное число, коэффициент aa
# b — вещественное число, коэффициент bb
# c — вещественное число, коэффициент cc

# Функция generator_square_polynom() должна возвращать функцию, которая принимает в
# качестве аргумента вещественное число x и возвращает значение выражения ax^2 + bx + c.

# Примечание 1. Рассмотрим пример из первого теста. Вызов generator_square_polynom(1, 2, 1)
# возвращает функцию, соответствующую квадратному трехчлену x^2 + 2x + 1x.  Функция
# присваивается переменной f. Далее полученная функция вызывается с аргументом 5 и
# возвращает значение 5^2 + 5*2 + 1 = 36.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию generator_square_polynom(), но не код, вызывающий ее.

def generator_square_polynom(a, b, c):
    return lambda x: a*x**2 + b*x + c



# Функция sourcetemplate()
# Строка запроса (query string) — часть URL адреса, содержащая ключи и их значения. Она
# начинается после вопросительного знака и идет до конца адреса. Например:

# https://beegeek.ru?name=timur     # строка запроса: name=timur

# Если параметров в строке запроса несколько, то они отделяются символом амперсанда &:

# https://beegeek.ru?name=timur&color=green     # строка запроса: name=timur&color=green 

# Реализуйте функцию sourcetemplate(), которая принимает один аргумент:

# url — URL адрес

# Функция sourcetemplate() должна возвращать функцию, которая принимает произвольное
# количество именованных аргументов и возвращает url адрес, объединенный со строкой
# запроса, сформированной из переданных аргументов. При вызове без аргументов она
# должна возвращать исходный url адрес без изменений.

# Примечание 1. Параметры в строке запроса должны располагаться в лексикографическом
# порядке ключей.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию sourcetemplate(), но не код, вызывающий ее.

def sourcetemplate(url):
    def get_url(**kwargs):
        query_string = []
        for key, value in sorted(kwargs.items()):
            query_string.append(f'{key}={value}')
        if not query_string:
            return url
        else:
            return f'{url}?{"&".join(query_string)}'
    return get_url


url = 'https://hide_and_seek.harvard'
load = sourcetemplate(url)
print(load(wizard='Dambldor', magic_wand='elderberry', thief='Volandemord'))


# Функция date_formatter()
# Нередко в разных странах используются разные форматы дат. Рассмотрим часть из них:

# код страны	формат даты
# ru	        DD.MM.YYYY
# us	        MM-DD-YYYY
# ca	        YYYY-MM-DD
# br	        DD/MM/YYYY
# fr	        DD.MM.YYYY
# pt	        DD-MM-YYYY

# Реализуйте функцию date_formatter(), которая принимает один аргумент:

# country_code — код страны

# Функция date_formatter() должна возвращать функцию, которая принимает в качестве
# аргумента дату (тип date) и возвращает строку с данной датой в формате страны с
# кодом country_code.

# Примечание 1. Гарантируется, что в функцию date_formatter() передаются только те
# коды стран, что перечислены в приведенной выше таблице.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию date_formatter(), но не код, вызывающий ее.

from datetime import date


def date_formatter(country_code):
    def get_countries_date_format(dt):
        countries_date_format = {'ru': '%d.%m.%Y', 'us': '%m-%d-%Y', 'ca': '%Y-%m-%d',
                             'br': '%d/%m/%Y', 'fr': '%d.%m.%Y', 'pt': '%d-%m-%Y',}
        return dt.strftime(countries_date_format[country_code])
    return get_countries_date_format


date_ru = date_formatter('us')
today = date(2025, 1, 5)
print(date_ru(today))