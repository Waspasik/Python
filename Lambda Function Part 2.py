# Напишите функцию func, используя синтаксис анонимных функций, которая принимает
# целочисленный аргумент и возвращает значение True, если он делится без остатка
# на 19 или на 13 и False в противном случае.

# Примечание 1. Следующий программный код:
# print(func(19))
# print(func(13))
# print(func(20))
# print(func(15))
# print(func(247))

# должен выводить:
# True
# True
# False
# False
# True

# Примечание 2. Вызывать анонимную функцию не нужно.

func = lambda number: number % 19 == 0 or number % 13 == 0



# Напишите функцию func, используя синтаксис анонимных функций, которая принимает
# строковый аргумент и возвращает значение True, если переданный аргумент начинается
# и заканчивается на английскую букву a (регистр буквы неважен) и False в противном
# случае.

# Примечание 1. Следующий программный код:
# print(func('abcd'))
# print(func('bcda'))
# print(func('abcda'))
# print(func('Abcd'))
# print(func('bcdA'))
# print(func('abcdA'))

# должен выводить:
# False
# False
# True
# False
# False
# True

# Примечание 2. Вызывать анонимную функцию не нужно.

func = lambda word: word[0].lower() == 'a' and word[-1].lower() == 'a'



# Напишите функцию is_non_negative_num, используя синтаксис анонимных функций, которая
# принимает строковый аргумент и возвращает значение True, если переданный аргумент
# является неотрицательным числом (целым или вещественным) и False в противном случае.

# Примечание 1. Следующий программный код:
# print(is_non_negative_num('10.34ab'))
# print(is_non_negative_num('10.45'))
# print(is_non_negative_num('-18'))
# print(is_non_negative_num('-34.67'))
# print(is_non_negative_num('987'))
# print(is_non_negative_num('abcd'))
# print(is_non_negative_num('123.122.12'))
# print(is_non_negative_num('123.122'))

# должен выводить:
# False
# True
# False
# False
# True
# False
# False
# True
# Примечание 2. Неотрицательные числа — это положительные числа и число нуль.

# Примечание 3. Вызывать анонимную функцию не нужно.

is_non_negative_num = lambda number: number.replace('.', '', 1).isdigit() and int(number.replace('.', '', 1)) >= 0



# Напишите функцию is_num, используя синтаксис анонимных функций, которая принимает
# строковый аргумент и возвращает значение True, если переданный аргумент является
# числом (целым или вещественным) и False в противном случае.

# Примечание 1. Следующий программный код:
# print(is_non_negative_num('10.34ab'))
# print(is_non_negative_num('10.45'))
# print(is_non_negative_num('-18'))
# print(is_non_negative_num('-34.67'))
# print(is_non_negative_num('987'))
# print(is_non_negative_num('abcd'))
# print(is_non_negative_num('123.122.12'))
# print(is_non_negative_num('123.122'))

# должен выводить:
# False
# True
# True
# True
# True
# False
# False
# True
# False

# Примечание 2. Используйте вспомогательную функцию из прошлого степа.

# Примечание 3. Вызывать анонимную функцию не нужно.

is_num = lambda number: number.replace('.', '', 1).replace('-', '', 1).isdigit() and '-' not in number[1::]



# Напишите программу, которая с помощью встроенных функций filter() и sorted() выводит
# слова из списка words, имеющие длину ровно 66 символов. Слова следует вывести в
# алфавитном порядке на одной строке, разделив символом пробела.

# Примечание. Используйте анонимную функцию в качестве критерия фильтрации.

words = ['beverage', 'monday', 'abroad', 'bias', 'abuse', 'abolish', 'abuse', 'abuse', 'bid',
        'wednesday', 'able', 'betray', 'accident', 'abduct', 'bigot', 'bet', 'abandon', 'besides',
        'access', 'friday', 'bestow', 'abound', 'absent', 'beware', 'abundant', 'abnormal', 'aboard',
        'about', 'accelerate', 'abort', 'thursday', 'tuesday', 'sunday', 'berth', 'beyond',
        'benevolent', 'abate', 'abide', 'bicycle', 'beside', 'accept', 'berry', 'bewilder',
        'abrupt', 'saturday', 'accessory', 'absorb']

filtered_words = sorted(list(filter(lambda word: len(word) == 6, words)))

print(*filtered_words)



# Напишите программу, которая с помощью встроенных функций map() и filter() удаляет из
# списка numbers все нечетные элементы, большие 47, а все четные элементы нацело делит
# на два (целочисленное деление – //). Полученные числа следует вывести на одной строке,
# разделив символом пробела и сохранив исходный порядок.

# Примечание. Используйте анонимную функцию в качестве критерия фильтрации.

numbers = [46, 61, 34, 17, 56, 26, 93, 1, 3, 82, 71, 37, 80, 27, 77, 94, 34, 100, 36, 81,
          33, 81, 66, 83, 41, 80, 80, 93, 40, 34, 32, 16, 5, 16, 40, 93, 36, 65, 8, 19,
          8, 75, 66, 21, 72, 32, 41, 59, 35, 64, 49, 78, 83, 27, 57, 53, 43, 35, 48, 17,
          19, 40, 90, 57, 77, 56, 80, 95, 90, 27, 26, 6, 4, 23, 52, 39, 63, 74, 15, 66,
          29, 88, 94, 37, 44, 2, 38, 36, 32, 49, 5, 33, 60, 94, 89, 8, 36, 94, 46, 33]

filtered_numbers = list(filter(lambda number: number % 2 == 0 or 47 >= number  and number % 2 != 0, numbers))
map_numbers = list(map(lambda number: number // 2 if number % 2 == 0 else number, filtered_numbers))

print(*map_numbers)



# Список data содержит информацию о численности населения некоторых штатов США. Напишите
# программу сортировки по убыванию списка data на основании последнего символа в названии
# штата. Затем распечатайте элементы этого списка, каждый на новой строке в формате:

# <название штата>: <численность населения>

# Vermont: 626299
# Massachusetts: 7029917
# ...

# Примечание 1. Сортировка производится в лексикографическом порядке (по алфавиту) по
# убыванию на основании последнего символа в названии штата. При этом, если два штата
# имеют одинаковый последний символ, следует сохранить их взаиморасположение в начальном списке.

# Примечание 2. Используйте анонимную функцию в качестве критерия сортировки.

data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'),
        (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'), (10711908, 'Georgia'),
        (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'),
        (7029917, 'Massachusetts'), (6910840, 'Tennessee')]


sorted_data = sorted(data, key=lambda word: word[1][-1], reverse=True)

for info in sorted_data:
    print(f'{info[1]}: {info[0]}')



# Список data содержит слова на русском языке. Напишите программу его сортировки по
# возрастанию длины слов, а затем в лексикографическом порядке. Отсортированные слова
# следует вывести на одной строке, разделив символом пробела.

# Примечание 1. Используйте анонимную функцию в качестве критерия сортировки.

# Примечание 2. Если длина слов совпадает, сортировать нужно в лексикографическом порядке.

data = ['год', 'человек', 'время', 'дело', 'жизнь', 'день', 'рука', 'раз', 'работа', 'слово',
       'место', 'лицо', 'друг', 'глаз', 'вопрос', 'дом', 'сторона', 'страна', 'мир', 'случай',
       'голова', 'ребенок', 'сила', 'конец', 'вид', 'система', 'часть', 'город', 'отношение',
       'женщина','деньги']

print(*sorted(sorted(data), key=lambda word: len(word)))



# Список mixed_list содержит целочисленные и строковые значения. Напишите программу, которая
# с помощью встроенной функции max() находит и выводит наибольшее числовое значение в указанном
# списке.

# Примечание 1. Для решения задачи используйте анонимную функцию и необязательный аргумент key
# функции max().

# Примечание 2. Обратите внимание, что сравнивать числа и строки нельзя.

mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb',
             1384878, 'sunday', 'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970,
             1772933, 1564063, 'abduct', 901271, 2680434, 'bicycle', 'accelerate', 1109147, 942908,
             'berry', 433507, 'bias', 'bestow', 1875665, 'besides', 'bewilder', 1586517, 375290,
             1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent', 'bigot',
             'abuse', 'abrupt', 343772, 'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard',
             'bet', 859105, 'accident', 2223166, 894187, 146564, 1251748, 2851543, 1619426, 2263113,
             1618068, 'berth', 'abolish', 'beware', 2618492, 1555062, 'access', 'absent', 'abundant',
             2950603, 'betray', 'beverage', 'abide', 'abandon', 2284251, 'wednesday', 2709698,
             'thursday', 810387, 'friday', 2576799, 2213552, 1599022, 'accept', 'abuse', 'abound',
             1352953, 'bid', 1805326, 1499197, 2241159, 605320, 2347441]

print(max(mixed_list, key=lambda item: item if isinstance(item, int) else item == 1))



# Список mixed_list содержит целочисленные и строковые значения. Напишите программу его
# сортировки по неубыванию значений элементов, при этом числа должны следовать до строк.
# Элементы отсортированного списка выведите на одной строке, разделив символом пробела.

# Примечание 1. Для решения задачи используйте анонимную функцию и необязательный аргумент
# key  функции sorted().

# Примечание 2. Если бы список mixed_list содержал значения:

# mixed_list = ['a', 'ab', 3, 5, 1, 8, 0, 'c', 'ac', 'aab']
# то результатом работы программы должно быть:
# 0 1 3 5 8 a aab ab ac c

mixed_list = ['beside', 48, 'accelerate', 28, 'beware', 'absorb', 'besides', 'berry',
             15, 65, 'abate', 'thursday', 76, 70, 94, 35, 36, 'berth', 41, 'abnormal',
             'bicycle', 'bid', 'sunday', 'saturday', 87, 'bigot', 41, 'abort', 13, 60,
             'friday', 26, 13, 'accident', 'access', 40, 26, 20, 75, 13, 40, 67, 12,
             'abuse', 78, 10, 80, 'accessory', 20, 'bewilder', 'benevolent', 'bet',
             64, 38, 65, 51, 95, 'abduct', 37, 98, 99, 14, 'abandon', 'accept', 46,
             'abide', 'beyond', 19, 'about', 76, 26, 'abound', 12, 95, 'wednesday',
             'abundant', 'abrupt', 'aboard', 50, 89, 'tuesday', 66, 'bestow', 'absent',
             76, 46, 'betray', 47, 'able', 11]

print(*sorted(mixed_list, key=str))



# Противоположный цвет
# В цветовой схеме RGB цвета задаются с помощью трех компонентов:

# R — интенсивность красной составляющей цвета;
# G — интенсивность зеленой составляющей цвета;
# B — интенсивность синей составляющей цвета.
# Противоположные цвета задаются как RGB и (255-R)(255-G)(255-B). Считается, что такие
# цвета хорошо гармонируют друг с другом.

# Напишите программу, которая по трем компонентам заданного цвета, находит компоненты
# противоположного цвета. 

# Формат входных данных
# На вход программе подается строка, содержащая три целых неотрицательных числа, компоненты
# R, G и B начального цвета,  разделенные символом пробела.

# Формат выходных данных
# Программа должна вывести три компонента R, G и B противоположного цвета, разделенные
# символом пробела.

# Примечание. Попробуйте решить задачу в одну строку с помощью встроенной функции map().

print(*list(map(lambda comp: 255 - comp, [int(c) for c in input().split()])))



# Значение многочлена 🌶️
# Многочленом степени n называется выражение вида a_nx^n + a_{n-1}x^{n-1}+ ... + a_2x^2+a_1x+a_0.

# На вход программе на первой строке подаются коэффициенты многочлена, разделенные символом
# пробела и целое число xx на второй строке. Напишите программу, которая вычисляет значение
# указанного многочлена при заданном значении xx.

# Формат входных данных
# На вход программе на первой строке подаются коэффициенты многочлена (целые числа), разделенные
# символом пробела и целое число xx на второй строке.

# Формат выходных данных
# Программа должна вывести одно число — значение указанного многочлена при заданном значении xx.

# Примечание 1. Первый тест задает многочлен 2x^2 + 4x + 3 , второй тест задает многочлен
# x^6 +2x^5 +3x^4 +4x^3 +5x^2 +6x +7

# Примечание 2. Решение задачи необходимо оформить в виде функции evaluate(coefficients, x),
# которая принимает список коэффициентов и значение аргумента. Функция evaluate() должна быть
# реализована на основе встроенных функций map() и reduce().

# Примечание 3. Не забудьте вызвать функцию evaluate(), чтобы вывести результат 😀.

from functools import reduce

def evaluate(coefficients, x):
    degrees = [int(i) for i in range(len(coefficients))]
    degrees.reverse()
    polynomials_list = list(map(lambda c, d: c*x**d, coefficients, degrees))
    polynomial_value = reduce(lambda result, item: result + item, polynomials_list)
    return print(polynomial_value)


coefficients = [int(i) for i in input().split()]
x = int(input())

evaluate(coefficients, x)