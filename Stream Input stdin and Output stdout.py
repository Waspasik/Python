# Обратный порядок
# Напишите программу, которая принимает произвольное количество строк и в каждой
# введенной строке располагает все символы в обратном порядке.

# Формат входных данных
# На вход программе подается произвольное количество строк.

# Формат выходных данных
# Программа должна вывести все введенные строки, предварительно расположив в
# каждой строке все символы в обратном порядке.

# Примечание 1. Порядок вывода строк должен совпадать с порядком их ввода.

# Примечание 2. Если на вход программе ничего не подается, то она ничего не должна
# выводить.

import sys

print(*[line.strip()[::-1] for line in sys.stdin], sep='\n')



# Размах данных
# Дана последовательность дат. Напишите программу, которая выводит количество дней
# между максимальной и минимальной датами данной последовательности.

# Формат входных данных
# На вход программе подается произвольное количество строк, в каждой строке записана
# дата в ISO формате (YYYY-MM-DD).

# Формат выходных данных
# Программа должна вывести единственное число — количество дней между максимальной
# и минимальной датами введенной последовательности.

import sys
from datetime import datetime

dates = [datetime.strptime(date.strip(), '%Y-%m-%d') for date in sys.stdin]
print((max(dates) - min(dates)).days)



# Лемма о трёх носках
# Анри и Дима, имея на руках ящик с бесконечным количеством носков, решили сыграть в
# игру. Ребята по очереди достают из ящика произвольное количество носков, и после
# неопределенного числа ходов игра заканчивается. Если тот, кто сделал последний ход,
# вытащил четное количество носков — он побеждает, в противном случае проигрывает.

# Напишите программу, которая определяет победителя в данной игре, если первый ход
# делает Анри.

# Формат входных данных
# На вход программе подается произвольное количество строк, в каждой строке записано
# натуральное число — количество носков, которые вытащил один из игроков.

# Формат выходных данных
# Программа должна определить победителя в игре, правила которой представлены в условии
# задачи, и вывести его имя.

# Примечание 1. Рассмотрим первый тест. Распишем ходы игроков:

# Анри — 1
# Дима — 3
# Анри — 5
# Дима — 10
# Анри — 3
# Дима — 2
# Анри — 12

# Побеждает Анри, так как он делает последний ход и достает четное количество носков.

import sys

all_socks = [int(count_socks.strip()) for count_socks in sys.stdin]
attempts = len(all_socks)
print(['Анри', 'Дима'][attempts % 2 == all_socks[-1] % 2])



# Урок статистики
# Дан список чисел, каждое из которых — рост очередного ученика онлайн-школы BEEGEEK.
# Напишите программу, которая определяет рост самого низкого и самого высокого учеников,
# а также средний рост среди всех учеников.

# Формат входных данных
# На вход программе подается произвольное количество строк, в каждой строке записано
# натуральное число — рост очередного ученика онлайн-школы BEEGEEK.

# Формат выходных данных
# Программа должна определить рост самого низкого и самого высокого учеников, а также
# средний рост среди всех учеников.

# Полученные результаты должны быть выведены в следующем формате:

# Рост самого низкого ученика: <рост самого низкого ученика>
# Рост самого высокого ученика: <рост самого высокого ученика>
# Средний рост: <средний рост среди всех учеников>

# Примечание 1. Если на вход программе ничего не подается, то она должна выводить текст
# нет учеников.

import sys
import statistics as st

student_growth = [int(growth) for growth in sys.stdin]
if student_growth:
    print(f'Рост самого низкого ученика: {min(student_growth)}')
    print(f'Рост самого высокого ученика: {max(student_growth)}')
    print(f'Средний рост: {round(st.mean(student_growth), 1)}')
else:
    print('нет учеников')



# Комментатор
# Дан блок кода на языке Python. Напишите программу, которая определяет количество
# строк в данном коде, которые содержат в себе только комментарии. Если в строке
# помимо комментария имеется что-то еще, то такую строку учитывать не нужно.

# Формат входных данных
# На вход программе подается произвольное количество строк, в совокупности представляющих
# блок кода на языке Python.

# Формат выходных данных
# Программа должна вывести единственное число — количество строк в введенном коде,
# которые содержат в себе только комментарии.

import sys

print(len(list(filter(lambda l: l[0] == '#', [line.strip() for line in sys.stdin]))))



# Без комментариев
# Дан блок кода на языке Python. Напишите программу, которая удаляет все строки в
# данном коде, которые содержат в себе только комментарии. Если в строке помимо
# комментария имеется что-то еще, то такую строку учитывать не нужно.

# Формат входных данных
# На вход программе подается произвольное количество строк, в совокупности
# представляющих блок кода на языке Python.

# Формат выходных данных
# Программа должна вывести введенный блок кода, предварительно удалив из него все
# строки которые содержат в себе только комментарии.

# Примечание 1. Порядок вывода строк кода должен совпадать с порядком их ввода.

import sys

print(*list(filter(lambda l: l.strip() and l.strip()[0] != '#' or bool(l.strip()) != True, [line.rstrip() for line in sys.stdin])), sep='\n')



# Панорамное агентство
# По чатам одного немалоизвестного мессенджера начали появляться новости сомнительного
# содержания. Оказалось, что некий молодежный клуб решил подшутить, распространяя всякие
# глупости. Однако подобное хулиганство мешает доверчивым людям, особенно пенсионного
# возраста, поэтому группа независимых программистов решила разработать бота, который
# мог бы оценить степень достоверности новости, а также отнести её к какой-либо категории.

# Напишите программу, которая выводит все новости заданной категории, располагая их по
# возрастанию степени достоверности.

# Формат входных данных
# На вход программе подается произвольное количество строк, в каждой строке, кроме
# последней, записана новость, категория, к которой она относится, и ее достоверность
# в следующем формате:

# <новость> / <категория> / <достоверность>
# В последней строке подается одиночная категория.

# Формат выходных данных
# Программа должна вывести все новости, которые относятся к введенной категории. Новости
# должны быть расположены в порядке возрастания степени достоверности, а при совпадении
# степеней достоверности — в лексикографическом порядке самих новостей.

import sys

news = sorted([line.strip().split(' / ') for line in sys.stdin])
category = news[-1][0]
sorted_news = sorted(news[:-1], key=lambda n: (n[1], float(n[2])))
filtered_news = list(filter(lambda n: n[1] == category, sorted_news))
print(*[article[0] for article in filtered_news], sep='\n')



# Это точно Python?
# Дана последовательность дат. Напишите программу, которая определяет, в каком порядке
# расположены даты в данной последовательности.

# Формат входных данных
# На вход программе подается произвольное количество строк (две или более), в каждой
# строке записана дата в формате DD.MM.YYYY.

# Формат выходных данных
# Программа должны вывести текст:

# ASC, если даты в введенной последовательности расположены строго в порядке возрастания
# DESC, если даты в введенной последовательности расположены строго в порядке убывания
# MIX, если даты в введенной последовательности расположены ни в порядке возрастания,
# ни в порядке убывания

import sys
from datetime import datetime

dates = [datetime.strptime(dt.strip(), '%d.%m.%Y') for dt in sys.stdin]
if len(set(dates)) == len(dates) and dates == sorted(dates):
    print('ASC')
elif len(set(dates)) == len(dates) and dates == sorted(dates, reverse=True):
    print('DESC')
else:
    print('MIX')



# Гуру прогрессий
# Дана последовательность целых чисел. Напишите программу, которая определяет, является
# ли данная последовательность прогрессией, и если да, то определяет её вид.

# Формат входных данных
# На вход программе подается произвольное количество строк (не менее трёх), в каждой
# строке записано натуральное число — очередной член последовательности.

# Формат выходных данных
# Программа должна вывести текст:

# Арифметическая прогрессия, если введенная последовательность чисел является арифметической прогрессией
# Геометрическая прогрессия, если введенная последовательность чисел является геометрической прогрессией
# Не прогрессия, если введенная последовательность чисел не является прогрессией

# Примечание 1. Гарантируется, что вид прогрессии определяется однозначно.


import sys


def arithmetic_progression(numbers):
    step = numbers[1] - numbers[0]
    for i in range(1, len(numbers)-1):
        if numbers[i] + step == numbers[i+1]:
            continue
        else:
            return False
    return True


def geometric_progression(numbers):
    step = numbers[1] / numbers[0]
    for i in range(1, len(numbers)-1):
        if numbers[i] * step == numbers[i+1]:
            continue
        else:
            return False
    return True

    
numbers = [int(num.strip()) for num in sys.stdin]

if arithmetic_progression(numbers):
    print('Арифметическая прогрессия')
elif geometric_progression(numbers):
    print('Геометрическая прогрессия')
else:
    print('Не прогрессия')