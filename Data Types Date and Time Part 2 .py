# Вам доступно время alarm. Дополните приведенный ниже код, чтобы он вывел следующие
# его компоненты:

# количество часов в формате HH
# количество минут в формате MM
# количество секунд в формате SS

from datetime import time

alarm = time(7, 30, 25)

print('Часы:', alarm.strftime('%H'))
print('Минуты:', alarm.strftime('%M'))
print('Секунды:', alarm.strftime('%S'))



# Вам доступна дата birthday. Дополните приведенный ниже код, чтобы он вывел следующие
# её компоненты:

# полное название месяца на английском
# полное название дня недели на английском
# год в формате YYYY
# номер месяца в формате MM
# день месяца в формате DD

from datetime import date

birthday = date(1992, 10, 6)

print('Название месяца:', birthday.strftime('%B'))
print('Название дня недели:', birthday.strftime('%A'))
print('Год:', birthday.strftime('%Y'))
print('Месяц:', birthday.strftime('%m'))
print('День:', birthday.strftime('%d'))



# В переменной florida_hurricane_dates хранится список дат, в которые произошел ураган
# во Флориде с 1950 по 2017 год.

# Дополните приведенный ниже код, чтобы он вывел самую раннюю дату из списка
# florida_hurriance_dates в трех различных форматах:

# в стандарте ISO (YYYY-MM-DD)
# в типичном для России стиле (DD.MM.YYYY)
# в типичном для Америки стиле (MM/DD/YYYY)

# Примечание 1. Считайте, что переменная florida_hurricane_dates объявлена и доступна
# вашей программе.

# Примечание 2. Считайте, что тип date уже импортирован в программу.

first_date = min(florida_hurricane_dates)

iso = 'Дата первого урагана в ISO формате: ' + str(first_date)
ru = 'Дата первого урагана в RU формате: ' + first_date.strftime('%d.%m.%Y')
us = 'Дата первого урагана в US формате: ' + first_date.strftime('%m/%d/%Y')

print(iso)
print(ru)
print(us)



# Ураган Эндрю, который обрушился на Флориду 24 августа 1992 года, был одним из самых
# дорогостоящих и смертоносных ураганов в истории США. Дополните приведенный ниже код,
# чтобы он вывел дату 24 августа 1992 года в трех различных форматах:

# в формате YYYY-MM
# в формате month_name (YYYY), где month_name – полное название месяца на английском
# в формате YYYY-day_number, где day_number – день года

from datetime import date

andrew = date(1992, 8, 24)

print(andrew.strftime('%Y-%m'))   # выводим дату в формате YYYY-MM
print(andrew.strftime('%B (%Y)'))   # выводим дату в формате month_name (YYYY)
print(andrew.strftime('%Y-%j'))   # выводим дату в формате YYYY-day_number



# Две даты
# Напишите программу, которая принимает на вход две даты и выводит ту, что меньше.

# Формат входных данных
# На вход программе подаются две корректные даты в ISO формате (YYYY-MM-DD), каждая на
# отдельной строке.

# Формат выходных данных
# Программа должна выбрать из двух введенных дат меньшую и вывести ее в формате DD-MM (YYYY).

from datetime import date

print(min([date.fromisoformat(input()) for _ in range(2)]).strftime('%d-%m (%Y)'))



# Отсортированные даты
# Напишите программу, которая принимает на вход последовательность дат и выводит их в
# порядке неубывания.

# Формат входных данных
# На вход программе подается натуральное число n, а затем nn корректных дат в ISO
# формате (YYYY-MM-DD), каждая на отдельной строке.

# Формат выходных данных
# Программа должна вывести введенные даты в порядке неубывания, каждую на отдельной
# строке, в формате DD/MM/YYYY.

# Примечание 1. Последовательность называется неубывающей, если каждый ее следующий
# член не меньше предыдущего, например:
# 1,1,2,3,4,4,4,5,6,...

# Обратите внимание, что такая последовательность не является возрастающей.

# Примечание 2. Считайте, что при форматировании даты с помощью %Y год выводится без
# ведущих нулей, так как на серверах Stepik установлен Linux.

from datetime import date

print(*map(lambda date: date.strftime('%d/%m/%Y'), sorted([date.fromisoformat(input()) for _ in range(int(input()))])), sep='\n')



# Функция print_good_dates()
# Тимур считает дату «интересной», если её год совпадает с годом его рождения, а
# сумма номера месяца и номера дня равна его возрасту. Год рождения Тимура — 1992,
# возраст — 29 лет.

# Реализуйте функцию print_good_dates(), которая принимает один аргумент:

# dates — список дат (тип date)

# Функция должна выводить «интересные» даты в порядке возрастания, каждую на отдельной
# строке, в формате  month_name DD, YYYY, где month_name — полное название месяца на
# английском. 

# Примечание 1. Если в функцию передается пустой список или список без интересных дат,
# функция ничего не должна выводить.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию print_good_dates(), но не код, вызывающий ее.

from datetime import date

def print_good_dates(dates):
    sorted_dates = sorted(list(filter(lambda d: d.year == 1992 and d.month + d.day == 29, dates)))
    return print(*map(lambda d: d.strftime('%B %d, %Y'), sorted_dates), sep='\n')



# Функция is_correct()
# Реализуйте функцию is_correct(), которая принимает три аргумента в следующем порядке:

# day — натуральное число, день
# month — натуральное число, месяц
# year — натуральное число, год

# Функция должна возвращать True, если дата с компонентами day, month и year является
# корректной, или False в противном случае.

# Примечание 1. Вспомните про конструкцию try-except. 

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию is_correct(), но не код, вызывающий ее.

from datetime import date

def is_correct(day, month, year):
    try:
        return bool(date(int(year), int(month), int(day)))
    except:
        return False



# Корректные даты
# Напишите программу, которая принимает на вход последовательность дат и проверяет
# каждую из них на корректность.

# Формат входных данных
# На вход программе подается последовательность дат в формате DD.MM.YYYY, каждая на
# отдельной строке. Концом последовательности является слово end.

# Формат выходных данных
# Программа должна для каждой введенной даты вывести текст Корректная или Некорректная
# в зависимости от того, является ли дата корректной, а затем вывести количество
# корректных дат.

# Примечание 1. Для анализа даты на корректность можете использовать уже реализованную
# функцию is_correct() из предыдущей задачи.

from datetime import date

counter = 0

for d in iter(input, 'end'):
    date_numbers = list(map(int, d.split('.')))
    try:
        if date(date_numbers[2], date_numbers[1], date_numbers[0]):
            counter += 1
            print('Корректная')
    except:
        print('Некорректная')

print(counter)