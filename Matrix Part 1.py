# Вывести матрицу 1
# На вход программе подаются два натуральных числа n и m, каждое на отдельной строке —
# количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждоен

# Напишите программу, которая сначала считывает элементы матрицы один за другим, затем выводит
# их в виде матрицы.

# Формат входных данных
# На вход программе подаются два числа n и m — количество строк и столбцов в матрице, далее
# идут n × m слов, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести считанную матрицу, разделяя ее элементы одним пробелом.

n, m = int(input()), int(input())
matrix = [[input() for j in range(m)] for _ in range(n)]
for i in range(n):
    print(*matrix[i])



# Вывести матрицу 2
# На вход программе подаются два натуральных числа n и m, каждое на отдельной строке —
# количество строк и столбцов в матрице. Далее вводятся сами элементы матрицы — слова, каждое
# на отдельной строке; подряд идут элементы сначала первой строки, затем второй, и т.д.

# Напишите программу, которая считывает элементы матрицы один за другим, выводит их в виде
# матрицы, выводит пустую строку, и снова ту же матрицу, но уже поменяв местами строки со
# столбцами: первая строка выводится как первый столбец, и так далее.

# Формат входных данных
# На вход программе подаются два числа n и m — количество строк и столбцов в матрице, далее
# идут n × m слов, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести считанную матрицу, за ней пустую строку, и ту же матрицу, но поменяв
# местами строки со столбцами. Элементы матрицы разделять одним пробелом.

n, m = int(input()), int(input())
matrix = [[input() for _ in range(m)] for _ in range(n)]
for i in range(n):
    print(*matrix[i])
print()
for j in range(m):
    for l in range(n):
        print(matrix[l][j], end=' ')
    print()



# След матрицы
# Следом квадратной матрицы называется сумма элементов главной диагонали. Напишите программу,
# которая выводит след заданной квадратной матрицы.

# Формат входных данных
# На вход программе подаётся натуральное число n — количество строк и столбцов в матрице,
# затем элементы матрицы (целые числа) построчно через пробел.

# Формат выходных данных
# Программа должна вывести одно число — след заданной матрицы.

n = int(input())
result = 0
matrix = [input().split() for _ in range(n)]
for i in range(n):
    result += int(matrix[i][i])
print(result)



# Больше среднего
# Напишите программу, которая выводит количество элементов квадратной матрицы в каждой строке,
# больших среднего арифметического элементов данной строки.

# Формат входных данных
# На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем
# элементы матрицы (целые числа) построчно через пробел.

# Формат выходных данных
# Программа должна вывести n чисел — для каждой строки количество элементов матрицы, больших
# среднего арифметического элементов данной строки.

n = int(input())
matrix = [input().split() for _ in range(n)]
for lst in matrix:
    for i in range(len(lst)):
        lst[i] = int(lst[i])
for lst in matrix:
    mean = sum(lst) / len(lst)
    total = 0
    for j in range(len(lst)):
        if lst[j] > mean:
            total += 1
    print(total)



# Максимальный в области 1
# Напишите программу, котора выводит максимальный элемент в заштрихованной области квадратной
# матрицы.

# Формат входных данных
# На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем
# элементы матрицы (целые числа) построчно через пробел.

# Формат выходных данных
# Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной
# матрицы.

# Примечание. Элементы главной диагонали также учитываются.

n = int(input())
matrix = [input().split() for _ in range(n)]
maximum = -100
iter_step = 0
for i in range(n):
    iter_step += 1
    for j in range(iter_step):
        if int(matrix[i][j]) > maximum:
            maximum = int(matrix[i][j])
print(maximum)



# Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной
# матрицы.

# Формат входных данных
# На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем
# элементы матрицы (целые числа) построчно через пробел.

# Формат выходных данных
# Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной
# матрицы.

# Примечание. Элементы диагоналей также учитываются.

n = int(input())
matrix = [input().split() for _ in range(n)]
maximum_left = -100
maximum_right = -100
for i in range(n):
    for j in range(n):
        if i >= j and i <= n - 1 - j:
            if int(matrix[i][j]) > maximum_left:
                maximum_left = int(matrix[i][j])
        elif i <= j and i >= n - 1 - j:
            if int(matrix[i][j]) > maximum_right:
                maximum_right = int(matrix[i][j])
if maximum_left > maximum_right:
    print(maximum_left)
else:
    print(maximum_right)



# Суммы четвертей
# Квадратная матрица разбивается на четыре четверти, ограниченные главной и побочной диагоналями:
# верхнюю, нижнюю, левую и правую.

# Напишите программу, которая вычисляет сумму элементов: верхней четверти; правой четверти; нижней
# четверти; левой четверти.

# Формат входных данных
# На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем
# элементы матрицы (целые числа) построчно через пробел.

# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# Примечание. Элементы диагоналей не учитываются.

n = int(input())
matrix = [input().split() for _ in range(n)]
sum_left, sum_right, sum_up, sum_down = 0, 0, 0, 0
for i in range(n):
    for j in range(n):
        if matrix[i][j] != matrix[i][i] and matrix[i][j] != matrix[i][n-i-1]:
            if i > j and i < n - 1 - j:
                sum_left += int(matrix[i][j])
            elif i < j and i > n - 1 - j:
                sum_right += int(matrix[i][j])
            elif i < j and i < n - 1 - j:
                sum_up += int(matrix[i][j])
            elif i > j and i > n - 1 - j:
                sum_down += int(matrix[i][j])
print('Верхняя четверть:', sum_up)
print('Правая четверть:', sum_right)
print('Нижняя четверть:', sum_down)
print('Левая четверть:', sum_left)
