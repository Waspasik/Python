# Дополните приведенный код так, чтобы он вывел произведение элементов кортежа numbers.

numbers = (2, 3, 5, 7, -11, 13, 17, 19, 23, 29, 31, -6, 41, 43, 47, 53, 59, 61, -96, 71, 1000, -1)
list1 = list(numbers)
total = 1
for num in list1:
    total *= num
print(total)



# Дополните приведенный код так, чтобы он преобразовал строку в кортеж символов строки и
# вывел результат.

data = 'Python для продвинутых!'

print(tuple(data))



# Программист Тимур написал программу для работы с биографическими данными русских поэтов.
# Данные содержатся в кортежах вида (фамилия, год рождения, город рождения). В процессе
# работы программы в некотором кортеже poet_data обнаружилась ошибка: ('Пушкин', 1799,
# 'Санкт-Петербург'), неверно указано место рождения, ведь Александр Пушкин родился в Москве.

# Дополните приведенный код так, чтобы в переменной poet_data находился правильный кортеж
# (с исправленным значением), а затем выведите его содержимое.

poet_data = ('Пушкин', 1799, 'Санкт-Петербург')
poet_data = list(poet_data)
poet_data[2] = 'Москва'
print(tuple(poet_data))



# Дополните приведенный код так, чтобы он вывел список, содержащий средние арифметические
# значения чисел каждого вложенного кортежа в заданном кортеже кортежей numbers.

numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
list_arithmetic_mean = [sum(list(num)) / len(num) for num in numbers]
print(list_arithmetic_mean)



# Уравнение параболы имеет вид y =ax^2 + bx + c, где a != 0. Напишите программу, которая
# по введенным значениям a, b, c определяет и выводит вершину параболы.

# Формат входных данных
# На вход программе подаются три целых числа, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести координаты вершины параболы.

a, b, c = int(input()), int(input()), int(input())
list1 = []
list1.append(-b / (2 * a))
list1.append((4 * a * c - b**2) / (4 * a))
print(tuple(list1))



# Конкурсный отбор
# Напишите программу, которая выводит список хорошистов и отличников в классе.

# Формат входных данных
# На вход программе подается натуральное число n, далее следует n строк с фамилией школьника
# и его оценкой на каждой из них.

# Формат выходных данных
# Программа должна вывести сначала все введённые строки с фамилиями и оценками учеников
# в том же порядке. Затем следует пустая строка, а затем выводятся строки с фамилиями и
# оценками хорошистов и отличников (в том же порядке).

# Примечание 1. Оценка ученика – это натуральное число от 1 до 5.

# Примечание 2. Гарантируется, что в классе есть хотя бы один хорошист – обладатель оценки 4,
# или отличник – получивший 5.

n = int(input())
list_student = [input().split() for _ in range(n)]
[print(*student) for student in list_student]
print()
[print(*student) for student in list_student if int(student[1]) == 4 or int(student[1]) == 5]



# Последовательность Трибоначчи
# Напишите программу, которая считывает натуральное число n и выводит первые n чисел
# последовательности Трибоначчи.

# Формат входных данных
# На вход программе подается одно число n (n ≤ 100) – количество членов последовательности.

# Формат выходных данных
# Программа должна вывести члены последовательности Трибоначчи, отделенные символом пробела.

# Примечание. Последовательность Трибоначчи – последовательность натуральных чисел, где каждое
# последующее число является суммой трех предыдущих: 1, 1, 1, 3, 5, 9, 17, 31, 57, 105 …

n = int(input())
n1, n2 = 1, 1
numbers = [n1]
for i in range(n - 1):
    numbers.append(n1)
    n1, n2 = n2, n1 + n2 + numbers[i]
print(*numbers)