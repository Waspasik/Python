# Вам доступен список files, содержащий названия различных файлов. Дополните
# приведенный ниже код, чтобы он вывел все расширения файлов, присутствующие
# в списке files, указав для каждого количество файлов с данным расширением.
# Расширения должны быть расположены в лексикографическом порядке, каждый на
# отдельной строке, в следующем формате:

# <расширение>: <количество файлов>

# Примечание. Начальная часть ответа выглядит так:

# csv: 5
# exe: 12
# ...

from collections import Counter

files = ['emoji_smile.jpeg', 'city-of-the-sun.mp3', 'dhook_hw.json', 'sample.xml',
         'teamspeak3.exe', 'project_module3.py', 'math_lesson3.mp4', 'old_memories.mp4',
         'spiritfarer.exe', 'backups.json', 'python_for_beg1.mp4', 'emoji_angry.jpeg',
         'exam_results.csv', 'project_main.py', 'classes.csv', 'plants.xml',
         'cant-help-myself.mp3', 'microsoft_edge.exe', 'steam.exe', 'math_lesson4.mp4',
         'city.jpeg', 'bad-disease.mp3', 'beauty.jpeg', 'hollow_knight_silksong.exe',
         'whatsapp.exe', 'photoshop.exe', 'telegram.exe', 'yandex_browser.exe',
         'math_lesson7.mp4', 'students.csv', 'emojis.zip', '7z.zip',
         'bones.mp3', 'python3.zip', 'dhook_lsns.json', 'carl_backups.json',
         'forest.jpeg', 'python_for_pro8.mp4', 'yandexdisc.exe', 'but-you.mp3',
         'project_module1.py', 'nothing.xml', 'flowers.jpeg', 'grades.csv',
         'nvidia_gf.exe', 'small_txt.zip', 'project_module2.py', 'tab.csv',
         'note.xml', 'sony_vegas11.exe', 'friends.jpeg', 'data.pkl']

for key, value in Counter(sorted(list(map(lambda file: file.split('.')[-1], files)))).items():
    print(f'{key}: {value}')



# Функция count_occurences()
# Реализуйте функцию count_occurences(), которая принимает два аргумента в следующем
# порядке:

# word — слово
# words — последовательность слов, разделенных пробелом

# Функция должна определять, сколько раз слово word встречается в последовательности
# words, и возвращать полученный результат.

# Примечание 1. Функция должна игнорировать регистр. То есть, например, слова Python
# и python считаются одинаковыми.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию count_occurences(), но не код, вызывающий ее.

from collections import Counter

def count_occurences(word, words):
    control_dict = Counter(list(map(lambda w: w.lower(), words.split())))
    return control_dict[word.lower()]



# Не поленимся и запишем
# Тимур составляет список покупок, но так как на его клавиатуре перестал работать блок
# с цифрами, то вместо указания количества товара числом, он добавляет его в список
# столько раз, сколько планирует купить. Все товары Тимур записывает в нижнем регистре
# через запятую.

# Напишите программу, которая выводит все товары из данного списка покупок, указывая
# для каждого его количество.

# Формат входных данных
# На вход программе подается последовательность товаров, разделенных запятой без пробелов.

# Формат выходных данных
# Программа должны вывести все введенные товары, указывая для каждого, сколько раз он
# встречается в данной последовательности. Товары должны быть расположены в
# лексикографическом порядке, каждый на отдельной строке, в следующем формате:

# <товар>: <количество>

from collections import Counter

for key, value in Counter(sorted(input().split(','))).items():
    print(f'{key}: {value}')



# А сколько стоит курс?
# Тимур живет в мире, в котором цена товара определяется как сумма Unicode кодов букв
# его названия. Буквенным обозначением данной валюты являются две заглавные латинские
# буквы UC. Например, ручка в его мире стоит:

# 1088 + 1091 + 1095 + 1082 + 1072 = 5428 UC

# Тимур составляет список покупок, но так как на его клавиатуре перестал работать блок
# с цифрами, то вместо указания количества товара числом, он добавляет его в список
# столько раз, сколько планирует купить. Все товары Тимур записывает в нижнем регистре
# через запятую.

# Напишите программу, которая группирует одинаковые товары из данного списка покупок
# и определяет стоимость каждой группы.

# Формат входных данных
# На вход программе подается последовательность товаров, разделенных запятой без
# пробелов.

# Формат выходных данных
# Программа должна сгруппировать одинаковые товары, определить общую стоимость каждой
# группы и вывести полученный результат. Товары должны быть расположены в
# лексикографическом порядке, каждый на отдельной строке, в следующем формате:

# <товар>: <цена за единицу товара> UC x <количество товаров в группе> = <общая стоимость
# группы> UC

# Примечание 1. Программа должна добавлять нужное количество пробелов, если название
# товара имеет меньшую длину, чем другие.

from collections import Counter

products = Counter(sorted(input().split(',')))
indent = len(max(products, key=len))

for key, value in products.items():
    cost = sum([ord(char) for char in key if char != ' '])
    print(f'{key.ljust(indent)}: {cost} UC x {value} = {cost * value} UC')



# The Zen of Python
# Вам доступен текстовый файл pythonzen.txt, содержащий текст на английском языке:

# The Zen of Python, by Tim Peters

# Beautiful is better than ugly.
# Explicit is better than implicit.
# ...

# Напишите программу, которая определяет, сколько раз встречается каждая буква в этом
# тексте. Буквы и их количество должны выводиться в лексикографическом порядке, каждая
# на отдельной строке, в следующем формате:

# <буква>: <количество>

# Примечание 1. Начальная часть ответа выглядит так:

# a: 53
# b: 21
# ...

# Примечание 2. Программа не должна учитывать регистр, то есть, например, буквы a и A
# считаются одинаковыми.

# Примечание 3. Программа должна игнорировать все небуквенные символы.

from collections import Counter

with open('pythonzen.txt', 'r', encoding='utf-8') as file:
    all_text = ''.join([char.lower() for char in file.read() if char.isalpha()])
    for key, value in sorted(Counter(all_text).items()):
        print(f'{key}: {value}')