# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ üôÇ
# –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω—ã –∏—Ö —Ñ–∞–º–∏–ª–∏–∏, –∏–º–µ–Ω–∞ –∏ –¥–∞—Ç—ã
# —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ –∫–∞–∫—É—é –∏–∑ –¥–∞—Ç —Ä–æ–¥–∏–ª–æ—Å—å –±–æ–ª—å—à–µ
# –≤—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö nn —Å—Ç—Ä–æ–∫–∞—Ö –≤–≤–æ–¥—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
# –æ –∫–∞–∂–¥–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ: —Ñ–∞–º–∏–ª–∏—è, –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –î–∞—Ç–∞
# —Ä–æ–∂–¥–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–º–µ—á–∞–µ—Ç
# –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –¥–∞—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞
# –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, –∫–∞–∂–¥—É—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ.

from datetime import datetime


employee_dict = {}
amount_birthdays = {}
max_amount_birthday = 0
result = []

for i in range(int(input())):
    employee_info = input().split(' ')
    birthday_employe = datetime.strptime(employee_info[2], '%d.%m.%Y')
    employee_dict[birthday_employe] = employee_dict.get(birthday_employe, []) + [' '.join(employee_info[:2])]
    
for key, value in employee_dict.items():
    amount_birthdays[key] = amount_birthdays.get(key, len(value))
    if len(value) > max_amount_birthday:
        max_amount_birthday = len(value)

for key, value in amount_birthdays.items():
    if value == max_amount_birthday:
        result.append(key.strftime('%d.%m.%Y'))

print(*sorted(result, key=lambda dt: datetime.strptime(dt, '%d.%m.%Y')), sep='\n')



# –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ üòî
# –î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω—ã –∏—Ö —Ñ–∞–º–∏–ª–∏–∏, –∏–º–µ–Ω–∞ –∏ –¥–∞—Ç—ã
# —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∞–º–æ–≥–æ –º–æ–ª–æ–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞,
# –ø—Ä–∞–∑–¥–Ω—É—é—â–µ–≥–æ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–µ–º–∏ –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY,
# –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∏—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤,
# —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö n —Å—Ç—Ä–æ–∫–∞—Ö –≤–≤–æ–¥—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–º
# —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ: —Ñ–∞–º–∏–ª–∏—è, –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
# —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∞–º–æ–≥–æ –º–æ–ª–æ–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ø—Ä–∞–∑–¥–Ω—É—é—â–µ–≥–æ —Å–≤–æ–π –¥–µ–Ω—å
# —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–µ–º–∏ –¥–Ω–µ–π, –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, —Ä–∞–∑–¥–µ–ª–∏–≤
# –ø—Ä–æ–±–µ–ª–æ–º. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç:

# –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —É –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–∞—Ç—ã 01.11.2021 –±–ª–∏–∂–∞–π—à–∏–º–∏ —Å–µ–º—å—é –¥–Ω—è–º–∏ —è–≤–ª—è—é—Ç—Å—è:

# 02.11.2021, 03.11.2021, 04.11.2021, 05.11.2021, 06.11.2021, 07.11.2021, 08.11.2021

from datetime import datetime, timedelta


yunger_employees = {}
today_input = input()

for _ in range(int(input())):
    employee_info = input().split(' ')
    birthday_employee = employee_info[2]
    todays_changed_year = today_input.replace(today_input[-4::], birthday_employee[-4::])
    begining_period = datetime.strptime(todays_changed_year, '%d.%m.%Y')
    birthday_employee = datetime.strptime(birthday_employee, '%d.%m.%Y')
    end_period = begining_period + timedelta(days=7)
    if birthday_employee.year == end_period.year:
        if begining_period < birthday_employee <= end_period:
            yunger_employees[birthday_employee] = yunger_employees.get(birthday_employee, ' '.join(employee_info[:2]))
    else:
        if begining_period < (birthday_employee + timedelta(days=365)) <= ((birthday_employee + timedelta(days=365)) + timedelta(days=7)):
            yunger_employees[birthday_employee] = yunger_employees.get(birthday_employee, ' '.join(employee_info[:2]))       
        
if bool(yunger_employees):
    print(yunger_employees[max(yunger_employees)])
else:
    print('–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è')



# FAKE NEWS üå∂Ô∏è
# –ö–æ–º–∞–Ω–¥–∞ BEEGEEK –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –Ω–æ–≤—ã–π –∫—É—Ä—Å 08.11.2022 —Ä–æ–≤–Ω–æ –≤ 12:00.
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç,
# —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM.

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –∏ —á–∞—Å–æ–≤, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
# –¥–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# –î–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <–∫–æ–ª-–≤–æ –¥–Ω–µ–π> –¥–Ω–µ–π –∏ <–∫–æ–ª-–≤–æ —á–∞—Å–æ–≤> —á–∞—Å–æ–≤
# –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–Ω–∏.

# –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º
# —Ñ–æ—Ä–º–∞—Ç–µ:

# –î–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <–∫–æ–ª-–≤–æ —á–∞—Å–æ–≤> —á–∞—Å–æ–≤ –∏ <–∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç> –º–∏–Ω—É—Ç
# –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∞—Å—ã.
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã.

# –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω—ã 08.11.2022 12:00, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞
# –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç: 

# –ö—É—Ä—Å —É–∂–µ –≤—ã—à–µ–ª!

from datetime import datetime, timedelta


def days_before_start_course(start, dn):
    if dn > start:
        return '–ö—É—Ä—Å —É–∂–µ –≤—ã—à–µ–ª!'
    else:
        datetime_range = start - dn

        if datetime_range > timedelta(days=1):
            date_range, time_range = int(str(datetime_range).split(' ')[0]), str(datetime_range).split(' ')[-1]
            hours = None
            if int(time_range.split(':')[0]) > 0:
                hours = int(time_range.split(':')[0])
            if hours != None:
                return f"–î–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {choose_plural(date_range, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))} –∏ {choose_plural(hours, ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))}"
            elif hours == None:
                return f"–î–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {choose_plural(date_range, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}"
        else:
            time_range = str(datetime_range)
            hours, minutes = None, None
            if int(time_range.split(':')[0]) > 0:
                hours = int(time_range.split(':')[0])
            if int(time_range.split(':')[1]) > 0:
                minutes = int(time_range.split(':')[1])
            if hours != None and minutes != None:
                return f"–î–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {choose_plural(hours, ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))} –∏ {choose_plural(minutes, ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'))}"
            elif hours != None and minutes == None:
                return f"–î–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {choose_plural(hours, ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))}"
            elif hours == None and minutes != None:
                return f"–î–æ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {choose_plural(minutes, ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'))}"


def choose_plural(amount, declensions):
    suffixes = {
        1: 0, 2: 1, 3: 1, 4: 1, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2,
        11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 20: 2, 0: 2,
    }
    for key, value in suffixes.items():
        if len(str(amount)) >= 2 and str(amount)[-2:] in ['11', '12', '13', '14']:
            return f'{amount} {declensions[suffixes[11]]}'
        elif len(str(amount)) >= 2 and str(amount)[-2:] == str(key):
            return f'{amount} {declensions[value]}'
        elif len(str(amount)) >= 2 and str(amount)[-1] == str(key):
            return f'{amount} {declensions[value]}' 
        elif len(str(amount)) == 1 and str(amount)[-1] == str(key):
            return f'{amount} {declensions[value]}'


start_day = datetime.strptime('08.11.2022 12:00', '%d.%m.%Y %H:%M')
day_now = datetime.strptime(input(), '%d.%m.%Y %H:%M')

print(days_before_start_course(start_day, day_now))
