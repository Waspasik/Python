# Страны и города
# На вход программе подается список стран и городов каждой страны. Затем даны названия
# городов. Напишите программу, которая для каждого города выводит, в какой стране он
# находится.

# Формат входных данных
# Программа получает на вход количество стран n. Далее идет nn строк, каждая строка
# начинается с названия страны, затем идут названия городов этой страны. В следующей
# строке записано число m, далее идут m запросов — названия каких-то m городов, из
# перечисленных выше.

# Формат выходных данных
# Программа должна вывести название страны, в которой находится данный город в соответствии
# с примером.

dict_cities = {}

for _ in range(int(input())):
    string = input().split()
    dict_cities.setdefault(string[0], string[1::])

for _ in range(int(input())):
    request = input()
    for key, value in dict_cities.items():
        if request in value:
            print(key)



# Телефонная книга
# Тимур записал телефоны всех своих друзей, чтобы автоматизировать поиск нужного номера.

# У каждого из друзей Тимура может быть один или более телефонных номеров. Напишите
# программу, которая поможет Тимуру находить все номера определённого друга.

# Формат входных данных
# В первой строке задано одно целое число n — количество номеров телефонов, информацию
# о которых Тимур сохранил в телефонной книге. В следующих n строках заданы телефоны и
# имена их владельцев через пробел. В следующей строке записано целое число m — количество
# поисковых запросов от Тимура. В следующих mm строках записаны сами запросы, по одному на
# строке. Каждый запрос — это имя друга, чьи телефоны Тимур хочет найти.

# Формат выходных данных
# Для каждого запроса от Тимура выведите в отдельной строке все телефоны, принадлежащие
# человеку с этим именем (независимо от регистра имени). Если в телефонной книге нет
# телефонов человека с таким именем, выведите в соответствующей строке «абонент не найден»
# (без кавычек).

# Примечание 1. Телефоны одного человека выводите в одну строку через пробел в том порядке,
# в каком они были заданы во входных данных.

# Примечание 2. Количество строк в ответе должно быть равно числу m.

# Примечание 3. Телефон — это несколько цифр, записанных подряд, а имя может состоять из
# букв русского или английского алфавита. Записи не повторяются.

dict_numbers = {}

for _ in range(int(input())):
    string = input().lower().split()
    dict_numbers.setdefault(string[1],[]).append(string[0])

for _ in range(int(input())):
    request = input().lower()
    print(*dict_numbers.get(request, 'абонент не найден'.split()))



# Секретное слово
# Напишите программу для расшифровки секретного слова методом частотного анализа.

# Формат входных данных
# В первой строке задано зашифрованное слово. Во второй строке задано одно целое число n
# – количество букв в словаре. В следующих nn строках записано, сколько раз конкретная
# буква алфавита встречается в этом слове – <буква>: <частота>.

# Формат выходных данных
# Программа должна вывести дешифрованное слово.

# Примечание. Гарантируется, что частоты букв не повторяются.

encrypted_word = input()
chars_encrypted_word = {}
chars_deciphered_word = {}

for char in encrypted_word:
    chars_encrypted_word[char] = chars_encrypted_word.get(char, 0) + 1

for _ in range(int(input())):
    reauest = input().split(': ')
    chars_deciphered_word.setdefault(int(reauest[1]), reauest[0])

for char in encrypted_word:
    print(*chars_deciphered_word[chars_encrypted_word[char]], end='')