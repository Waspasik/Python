# Напишите функцию get_circle(radius), которая принимает в качестве аргумента радиус окружности и возвращает два значения: длину окружности
# и площадь круга, ограниченного данной окружностью.

from math import *

def get_circle(radius):
    length = 2 * pi * r
    square = pi * r**2
    return length, square

r = float(input())

length, square = get_circle(r)
print(length, square)



# Даны три вещественных числа aa, bb, cc. Напишите программу, которая находит вещественные корни квадратного уравнения ax^2 + bx + c = 0.

# Формат входных данных
# На вход программе подается три вещественных числа a != 0, b, c, каждое на отдельной строке.

# Формат выходных данных
# Программа должна вывести вещественные корни уравнения если они существуют или текст «Нет корней» в противном случае.

# Примечание. Если уравнение имеет два корня, то следует вывести их в порядке возрастания.

from math import*

a, b, c = float(input()), float(input()), float(input())
d = b**2 - (4 * a * c)
if d > 0:
    x1 = (-b + sqrt(d)) / (2 * a)
    x2 = (-b - sqrt(d)) / (2 * a)
    if x1 > x2:
        print(x2, x1, sep='\n')
    else:
        print(x1, x2, sep='\n')
elif d == 0:
    x = -b / (2 * a)
    print(x)
else:
    print('Нет корней')



# Напишите функцию solve(a, b, c), которая принимает в качестве аргументов три целых числа a, b, c – коэффициенты квадратного уравнения
# ax^2 + bx + c = 0 и возвращает его корни в порядке возрастания.

# Примечание 1. Гарантируется, что квадратное уравнение имеет корни.

from math import*

def solve(a, b, c):
    d = b**2 - (4 * a * c)
    if d > 0:
        x1 = (-b + sqrt(d)) / (2 * a)
        x2 = (-b - sqrt(d)) / (2 * a)
        if x1 > x2:
            return x2, x1
        else:
            return x1, x2
    elif d == 0:
        x = -b / (2 * a)
        return x, x

a, b, c = int(input()), int(input()), int(input())

x1, x2 = solve(a, b, c)
print(x1, x2)