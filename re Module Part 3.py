# Функция normalize_jpeg()
# Реализуйте функцию normalize_jpeg(), которая принимает один аргумент:

# filename — название файла, имеющее расширение jpeg или jpg, которое может быть записано
# буквами произвольного регистра

# Функция должна возвращать новое название файла с нормализованным расширением — jpg.

# Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию normalize_jpeg(), но не код, вызывающий ее.

from re import sub, IGNORECASE


def normalize_jpeg(filename):
    return sub(r'jpe?g$', r'jpg', filename, flags=IGNORECASE)



# Функция normalize_whitespace()
# Реализуйте функцию normalize_whitespace(), которая принимает один аргумент:

# string — произвольная строка

# Функция должна заменять все множественные пробелы в строке string на единственный пробел
# и возвращать полученный результат.

# Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию normalize_whitespace(), но не код, вызывающий ее.

from re import sub


def normalize_whitespace(string):
    return sub(r'[ ]+', r' ', string)



# Ключевые слова
# В Python существуют ключевые слова, которые нельзя использовать для названия переменных,
# функций и классов. Для получения списка всех ключевых слов можно воспользоваться атрибутом
# kwlist из модуля keyword.

# Напишите программу, которая принимает строку текста и заменяет в ней все ключевые слова на
# <kw>.

# ормат входных данных
# На вход программе подается строка.

# Формат выходных данных
# Программа должна в введенном тексте заменить все ключевые слова (в любом регистре) на строку
# <kw> и вывести полученный результат.

import keyword
from re import sub, IGNORECASE


python_keyword = '|'.join(sorted(keyword.kwlist, key=len, reverse=True))
print(sub(rf'{python_keyword}', r'<kw>', input(), flags=IGNORECASE))



# Первые буквы
# Напишите программу, которая меняет местами первые две буквы в каждом слове, состоящем из двух
# или более букв.

# ормат входных данных
# На вход программе подается строка, содержащая слова.

# Формат выходных данных
# Программа должна в введенной строке заменить первые две буквы в каждом слове, состоящем из двух
# или более букв, и вывести полученный результат.

from re import sub


print(sub(r'(\w)(\w)(\w*)', r'\2\1\3', input()))



# Умножение строк
# Назовем умножением строки на число запись в формате n(string), где n — неотрицательное целое
# число, а string — строка, которая должна быть записана n раз. Раскрытием умножения будем
# считать развернутый вариант данной записи, например, строка ti2(Be)3(Ge) после раскрытия в
# ней всех умножений будет иметь вид tiBeBeGeGeGe.

# Напишите программу, которая раскрывает все умножения в тексте и выводит полученный результат.

# Формат входных данных
# На вход программе подается одна строка, содержащая строчные латинские буквы, числа и скобки.

# Формат выходных данных
# Программа должна вывести строку, в которой раскрыты все умножения с учетом приоритетности
# операций.

# Примечание 1. Гарантируется, что умножение в подаваемой строке всегда записано корректно,
# то есть строго в формате n(string). Записи вида 4(2), 3q, (fg)7 не корректны.

# Примечание 2. Рассмотрим третий тест. С учетом приоритетности операций сначала раскрываем
# умножение 2(a) и получаем промежуточную строку bbbb10(aa)bbb, далее раскрываем умножение
# 10(aa) и получаем конечный результат в виде строки bbbbaaaaaaaaaaaaaaaaaaaabbb.

# Примечание 3. Строка, в которой раскрыты все умножения, всегда содержит исключительно строчные
# латинские буквы.

# Примечание 4. Максимальная длина результирующей строки не превосходит 450000 символов.

from re import sub, search


def string_multiplication(match_obj):
    mult, string = match_obj.group(0).split('(')
    return int(mult) * string.replace(')', '')

text = input()

while True:
    result = sub(r'\d+\(\w+\)', string_multiplication, text)
    text = result
    if not search(r'\(\w+\)', result):
        print(result)
        break