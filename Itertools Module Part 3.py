# Функция sum_of_digits()
# Реализуйте функцию sum_of_digits(), которая принимает один аргумент:

# iterable — итерируемый объект, элементами которого являются натуральные числа

# Функция должна возвращать единственное число — сумму цифр всех чисел, присутствующих
# в итерируемом объекте iterable.

# Примечание 1. Рассмотрим набор чисел 13, 20, 41, 2, 2, 5 из первого
# теста. Сумма цифр всех представленных чисел будет равна:
# 1 + 3 + 2 + 0 + 4 + 1 + 2 + 2 + 5 = 20

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию sum_of_digits(), но не код, вызывающий ее.

from itertools import chain
from functools import reduce


def sum_of_digits(iterable):
    return reduce(lambda a, b: int(a) + int(b), chain.from_iterable(map(str, iterable)))



# Функция is_rising()
# Реализуйте функцию is_rising(), которая принимает один аргумент:

# terable — итерируемый объект, элементами которого являются числа

# Функция должна возвращать True, если элементы итерируемого объекта расположены
# строго по возрастанию, или False в противном случае.

# Примечание 1. Гарантируется, что итерируемый объект, передаваемый в функцию, не
# является множеством, а также содержит не менее двух элементов.

# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию is_rising(), но не код, вызывающий ее.

from itertools import pairwise


def is_rising(iterable):
    return all(a < b for a, b in pairwise(iterable))



# Функция max_pair()
# Реализуйте функцию max_pair(), которая принимает один аргумент:

# iterable — итерируемый объект, элементами которого являются числа

# Функция должна возвращать единственное число — максимальную сумму двух соседних чисел
# итерируемого объекта iterable.

# Примечание 1. Рассмотрим список чисел 1, 8, 2, 4, 3 из первого теста. Из данной
# последовательности можно получить следующие пары соседних элементов: 1 и 8, 8 и 2, 2 и
# 4, 4 и 3. Максимальную сумму имеет вторая пара — 10.

# Примечание 2. Гарантируется, что итерируемый объект, передаваемый в функцию, не является
# множеством, а также содержит не менее двух элементом.

# Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию max_pair(), но не код, вызывающий ее.

from itertools import pairwise


def max_pair(iterable):
    return max(a + b for a, b in pairwise(iterable))



# Функция ncycles()
# Реализуйте функцию ncycles(), которая принимает два аргумента в следующем порядке:

# iterable — итерируемый объект
# times — натуральное число

# Функция должна возвращать итератор, генерирующий последовательность элементов итерируемого
# объекта iterable, зацикленных times раз.

# римечание 1. Элементы итерируемого объекта в возвращаемом функцией итераторе должны
# располагаться в своем исходном порядке.

# Примечание 2. Гарантируется, что итерируемый объект, передаваемый в функцию, не является
# множеством.

# Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию ncycles(), но не код, вызывающий ее.

from itertools import tee, chain


def ncycles(iterable, times):
    for it in tee(iterable, times):
        yield from it