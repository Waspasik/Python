# В таблице приведены запросы и количество страниц, которые нашел поисковый сервер Google
# по этим запросам в сегменте Интернета:

# Запрос	                     Количество страниц (тыс.)
# математика & ЕГЭ	             315315
# математика & параметры	     225225
# математика & параметры & ЕГЭ	 110110

# Какое количество страниц (в тысячах) будет найдено по запросу (параметры | ЕГЭ) & математика?

# Примечание. В языке запросов поискового сервера для обозначения логической операции «ИЛИ»
# (объединение) используется символ «|», а для обозначения логической операции «И» (пересечение)
# — символ «&».

n,m,k,p = int(input()), int(input()), int(input()), int(input())
print(n - ((m - p) + (k - p) + p))



# Восход
# На спутнике «Восход» установлен прибор для измерения солнечной активности. Каждую минуту
# он передаёт в обсерваторию по каналу связи положительное целое число — количество энергии
# солнечного излучения. Для правильного анализа результатов нет необходимости держать
# повторяющиеся данные. Напишите программу, которая выводит максимальное количество показаний
# спутника, при удалении которых результат будет правильно проанализирован.

# Формат входных данных
# На вход программе подаётся одна строка, содержащая числа – показания спутника «Восход».
# Числа указываются через пробел и не содержат ведущих нулей.

# Формат выходных данных
# Программа должна вывести максимальное количество показаний, после удаления которых анализ
# результатов будет произведен верно.

indication = [int(i) for i in input().split()]
set_indication = set(indication)
print(len(indication) - len(set_indication))



# Города
# Тимур и Руслан играют в игру города. Они очень любят эту игру и знают много городов, особенно
# Тимур, однако к концу игры ввиду своего возраста забывают, какие города уже называли.

# Напишите программу, считывающую информацию об игре и сообщающую ребятам, что очередной город
# назван повторно.

# Формат входных данных
# На вход программе в первой строке подаётся натуральное число n – количество названных городов,
# в последующих n строках вводятся названные города и ещё одна строка с новым, только что названым
# городом.

# Формат выходных данных
# Программа должна вывести OK, если этот город ещё не вспоминали, и REPEAT, если город уже был
# назван.

n = int(input())
set_sities = set(input() for i in range(n))
if input() not in set_sities:
    print('OK')
else:
    print('REPEAT')



# Книги на прочтение
# Руслан получил в конце учебного года список литературы на лето. Теперь ему надо выяснить,
# какие книги из этого списка у него есть. У Руслана на компьютере в текстовом файле записаны
# все книги из его домашней библиотеки в случайном порядке.

# Напишите программу, определяющую для каждой книги из списка на прочтение, есть она у Руслана
# или нет.

# Формат входных данных
# На вход программе в первой строке подается натуральное число m — количество книг в домашней
# библиотеке Руслана. Во второй строке записано натуральное число n —  количество книг в списке
# на лето. Далее идут m строк с названиями книг из домашней библиотеки и nn строк названий из 
# cписка на лето.

# Формат выходных данных
# Программа должна вывести n строк, в каждой из которых написано слово YES, если книга найдена
# в библиотеке, и NO, если нет.

m, n = int(input()), int(input())
self_library = set(input() for _ in range(m))

for i in range(n):
    school_book = input()
    if school_book in self_library:
        print('YES')
    else:
        print('NO')
    


# Странное увлечение
# Как известно, математики странные люди. Не составляет исключения и Тимур — автор данного курса.
# Каждый день Тимур решает ровно две сложные математические задачи. Решая первую задачу, он 
# записывает на первом листочке все числа, которые в ней встречаются. Далее он делает паузу и
# берется за вторую задачу. Затем записывает на втором листочке все числа, которые в ней встречаются.
# После этого он берет еще один листок и выписывает на него все совпадающие числа из первых двух
# листочков. Если такие числа есть, день удался, если общих чисел нет, Тимур считает день неудачным.

# Напишите программу, которая находит общие числа двух листочков или сообщает, что день не удался.

# Формат входных данных
# На вход программе подаются две строки с числами: в первой строке числа с первого листочка, во
# второй со второго.

# Формат выходных данных
# Программа должна вывести числа, встретившиеся на обоих листках в отсортированном по убыванию
# порядке, либо словосочетание BAD DAY, если таких чисел нет.

numbers1 = set(int(i) for i in input().split())
numbers2 = set(int(i) for i in input().split())

if numbers1 & numbers2:
    print(*sorted(numbers1 & numbers2, reverse=True))
else:
    print('BAD DAY')



# Онлайн-школа BEEGEEK 1
# При приёме новых сотрудников в онлайн-школу BEEGEEK её руководитель тестирует не только
# профессиональные качества кандидата, но и его память.

# Кандидату показывают ненадолго несколько различных чисел, а затем кандидат должен их назвать.
# Причем неважно, в каком порядке он их вспоминает, и повторяется он или нет, главное он должен
# назвать все числа, не добавляя лишних.

# Напишите программу, определяющую, успешно ли прошел кандидат тестирование памяти.

# Формат входных данных
# На вход программе подаются две строки с числами: в первой строке показанные кандидату, а во
# второй ответы кандидата.

# Формат выходных данных
# Программа должна вывести YES, если кандидат прошел испытание и его можно брать на работу и
# NO в противном случае.

test_numbers = set(int(i) for i in input().split())
answer_numbers = set(int(i) for i in input().split())

if test_numbers == answer_numbers:
    print('YES')
else:
    print('NO')



# Онлайн-школа BEEGEEK 2
# Каждый ученик, обучающийся в онлайн-школе BEEGEEK изучает либо математику, либо информатику,
# либо оба эти предмета. У руководителя школы есть списки изучающих каждый предмет.

# Напишите программу, позволяющую руководителю выяснить, сколько учеников изучает только
# математику.

# Формат входных данных
# На вход программе в первых двух строках подаются числа m и n – количества учеников, изучающих
# математику и информатику соответственно. Далее идут m строк — фамилии учеников, которые изучают
# математику и n строк с фамилиями учеников, изучающих информатику.

# Формат выходных данных
# Программа должна вывести количество учеников, которые изучают только математику.

# Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.

m, n = int(input()), int(input())
student_m = set(input() for _ in range(m))
student_n = set(input() for _ in range(n))

print(len(student_m - student_n))



# Онлайн-школа BEEGEEK 3
# Каждый ученик, обучающийся в онлайн-школе BEEGEEK изучает либо математику, либо информатику,
# либо оба этих предмета. У руководителя школы есть списки изучающих каждый предмет.

# Напишите программу, позволяющую руководителю выяснить, сколько учеников изучает только один
# предмет.

# Формат входных данных
# На вход программе в первых двух строках подаются числа m и n – количества учеников, изучающих
# математику и информатику соответственно. Далее идут m строк — фамилии учеников, которые изучают
# математику и n строк с фамилиями учеников, изучающих информатику.

# Формат выходных данных
# Программа должна вывести количество учеников, которые изучают только один предмет. Если таких
# учеников не окажется, то необходимо вывести NO.

# Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.

m, n = int(input()), int(input())
student_m = set(input() for _ in range(m))
student_n = set(input() for _ in range(n))

if len(student_m ^ student_n):
    print(len(student_m ^ student_n))
else:
    print('NO')



# Онлайн-школа BEEGEEK 4
# Руководитель онлайн-школы BEEGEEK и его помощник составили списки учеников их школы.

# Напишите программу, которая выведет все фамилии учеников, которые вспомнили руководитель
# и его помощник.

# Формат входных данных
# На вход программе в первой строке подаются фамилии, записанные руководителем школы, а на
# второй строке - помощником руководителя. Фамилии указываются через пробел.

# Формат выходных данных
# Программа должна вывести все фамилии учеников, отсортированных в лексикографическом порядке,
# записанные руководителем и его помощником.

# Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.

team_leader = set(name for name in input().split())
assistant_manager = set(name for name in input().split())

print(*sorted(team_leader | assistant_manager))



# Онлайн-школа BEEGEEK 5 🌶️
# Каждый ученик, обучающийся в онлайн-школе BEEGEEK изучает либо математику, либо информатику,
# либо оба этих предмета. У руководителя школы есть списки учеников, изучающих каждый предмет.
# Случайно списки всех учеников перемешались.

# Напишите программу, которая позволит руководителю выяснить, сколько учеников изучает только
# один предмет.

# Формат входных данных
# На вход программе в первых двух строках подаются числа m и n – количества учеников, изучающих
# математику и информатику соответственно. Далее идут m + n строк — фамилии учеников, изучающих
# математику и информатику, в произвольном порядке.

# Формат выходных данных
# Программа должна вывести количество учеников, которые изучают только один предмет. Если таких
# учеников не окажется, то необходимо вывести NO.

# Примечание. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.

m, n = int(input()), int(input())
students = {input()}
counter = 0

for i in range(m + n - 1):
    student = input()
    if student in students:
        counter += 2
    students.add(student)

result = m + n - counter

if result:
    print(result)
else:
    print('NO')



# Онлайн-школа BEEGEEK 6 🌶️
# Руководителю онлайн-школы BEEGEEK захотелось узнать, кто из его учеников присутствовал на всех
# уроках с начала учебного года. Для каждого урока есть листок со списком присутствовавших учеников.

# Напишите программу, определяющую фамилии учеников, которые присутствовали на всех уроках.

# Формат входных данных
# На вход программе в первой строке дается число m – количество уроков, проведенных с начала
# учебного года. Далее идёт m блоков строк, описывающих листки с фамилиями. На первой строке каждого
# блока указано количество фамилий n_i, затем идёт n_i строчек с фамилиями тех, кто был на i-ом уроке.

# Формат выходных данных
# Программа должна вывести фамилии учеников, которые были на всех уроках, отсортированных в
# лексикографическом порядке. Каждая фамилия должна быть записана на отдельной строке.

# Примечание 1. Гарантируется, что среди учеников школы BEEGEEK нет однофамильцев.

# Примечание 2. Гарантируется, что хотя бы один ученик был на всех уроках.

m = int(input())
students1 = {input() for _ in range(int(input()))}

for i in range(m-1):
    students2 = {input() for _ in range(int(input()))}
    students1.intersection_update(students2)

print(*sorted(students1), sep='\n')