# –§—É–Ω–∫—Ü–∏—è index_of_nearest()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é index_of_nearest(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º
# –ø–æ—Ä—è–¥–∫–µ:

# numbers ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
# number ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤ —Å–ø–∏—Å–∫–µ numbers –±–ª–∏–∂–∞–π—à–µ–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —á–∏—Å–ª–æ –∫ —á–∏—Å–ª—É number
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–≥–æ –∏–Ω–¥–µ–∫—Å. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ numbers –ø—É—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ -1.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª,
# –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —è–≤–ª—è—é—â–∏—Ö—Å—è –±–ª–∏–∂–∞–π—à–∏–º–∏ –∫ –∏—Å–∫–æ–º–æ–º—É —á–∏—Å–ª—É, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
# –Ω–∞–∏–º–µ–Ω—å—à–∏–π –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ –±–ª–∏–∂–∞–π—à–∏—Ö —á–∏—Å–µ–ª.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç—Ä–µ—Ç–∏–π —Ç–µ—Å—Ç. –ë–ª–∏–∂–∞–π—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏ –∫ —á–∏—Å–ª—É 4 —è–≤–ª—è—é—Ç—Å—è 5 –∏ 3,
# –∏–º–µ—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã 1 –∏ 2 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –ù–∞–∏–º–µ–Ω—å—à–∏–π –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ä–∞–≤–µ–Ω 1.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é
# —Ñ—É–Ω–∫—Ü–∏—é index_of_nearest(), –Ω–æ –Ω–µ –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–µ.

from math import*

def index_of_nearest(numbers, number):
    if bool(numbers):
        num_difference = abs(numbers[0] - number)
        result_index = 0
        for i in range(len(numbers)):
            if abs(numbers[i] - number) < num_difference:
                num_difference = abs(numbers[i] - number)
                result_index = i
        return result_index
    else:
        return -1



# –§—É–Ω–∫—Ü–∏—è spell()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é spell(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö
# –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤-—Å–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∫–ª—é—á–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äî –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤, –∞ –∑–Ω–∞—á–µ–Ω–∏—è
# ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤ –Ω–∞ —ç—Ç—É –±—É–∫–≤—É.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞
# –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä —Å–ª–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π
# —Å–ª–æ–≤–∞—Ä—å –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –∏–º–µ–Ω–Ω–æ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é
# —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –Ω–µ –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–µ.

def spell(*args):
    lowercase_words = list(map(lambda word: word.lower(), args))
    return {word[0]: max(map(len, filter(lambda w: w.startswith(word[0]), lowercase_words))) for word in lowercase_words}



# –§—É–Ω–∫—Ü–∏—è choose_plural() üå∂Ô∏èüå∂Ô∏è
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é choose_plural(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º
# –ø–æ—Ä—è–¥–∫–µ:

# amount ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# declensions ‚Äî –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ

# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –ø—É—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ
# —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ declensions –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ amount, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ>

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ä—Ç–µ–∂ –ª–µ–≥–∫–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –º–Ω–µ–º–æ–Ω–∏—á–µ—Å–∫–æ–º—É
# –ø—Ä–∞–≤–∏–ª—É: –æ–¥–∏–Ω, –¥–≤–∞, –ø—è—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:

# –¥–ª—è —Å–ª–æ–≤–∞ ¬´–∞—Ä–±—É–∑¬ª: –∞—Ä–±—É–∑, –∞—Ä–±—É–∑–∞, –∞—Ä–±—É–∑–æ–≤
# –¥–ª—è —Å–ª–æ–≤–∞ ¬´—Ä—É–±–ª—å¬ª: —Ä—É–±–ª—å, —Ä—É–±–ª—è, —Ä—É–±–ª–µ–π

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é
# —Ñ—É–Ω–∫—Ü–∏—é choose_plural(), –Ω–æ –Ω–µ –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–µ.

def choose_plural(amount, declensions):
    suffixes = {
        1: 0, 2: 1, 3: 1, 4: 1, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2,
        11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 2, 17: 2, 18: 2, 19: 2, 20: 2, 0: 2,
    }
    
    for key, value in suffixes.items():
        if len(str(amount)) >= 2 and str(amount)[-2:] in ['11', '12', '13', '14']:
            return f'{amount} {declensions[suffixes[11]]}'
        elif len(str(amount)) >= 2 and str(amount)[-2:] == str(key):
            return f'{amount} {declensions[value]}'
        elif len(str(amount)) >= 2 and str(amount)[-1] == str(key):
            return f'{amount} {declensions[value]}' 
        elif len(str(amount)) == 1 and str(amount)[-1] == str(key):
            return f'{amount} {declensions[value]}'