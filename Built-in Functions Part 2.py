# Функция hash_as_key()
# Реализуйте функцию hash_as_key(), которая принимает один аргумент:

# objects — список хешируемых объектов

# Функция должна возвращать словарь, ключом в котором является хеш-значение объекта
# из списка objects, а значением — сам объект. Если хеш-значения некоторых объектов
# совпадают, их следует объединить в список.

# Примечание 1. Элементы в возвращаемом функцией словаре, а также объекты в списке,
# имеющие равные хеш-значения, должны располагаться в своем исходном порядке.

# римечание 2. В тестирующую систему сдайте программу, содержащую только необходимую
# функцию hash_as_key(), но не код, вызывающий ее.

def hash_as_key(objects):
    result = dict()

    for obj in objects:
        if hash(obj) not in result:
            result[hash(obj)] = [obj]
        else:
            result[hash(obj)].append(obj)
    
    for key, value in result.items():
        if len(value) == 1:
            result[key] = value[0]

    return result



# Коллекции
# Напишите программу, которая принимает на вход корректный непустой список, корректный
# непустой кортеж или корректное произвольной длины множество, и выполняет следующее:

# если введен список, выводит его последний элемент
# если введен кортеж, выводит его первый элемент
# если введено множество, выводит количество его элементов

# Формат входных данных
# На вход программе подается корректный непустой список, кортеж или корректное произвольной
# длины множество.

# Формат выходных данных
# Программа должна вывести определенное значение, в зависимости от типа введенной коллекции.

input_data = eval(input())

if isinstance(input_data, list):
    print(input_data[-1])
elif isinstance(input_data, tuple):
    print(input_data[0])
else:
    print(len(input_data))



# Математические выражения
# Напишите программу, которая принимает на вход произвольное количество строк, содержащих
# корректные математические выражения, и выводит значение наибольшего из них.

# Формат входных данных
# На вход программе подается произвольное количество строк, каждое из которых содержит
# корректное математическое выражение.

# Формат выходных данных
# Программа должна вычислить значения введенных выражений и вывести набольшее.

import sys


print(max([eval(string) for string in sys.stdin]))



# Минимум и максимум
# Напишите программу, которая определяет минимальное и максимальное значения функции
# на отрезке в целых точках.

# Формат входных данных
# На вход программе в первой строке подается корректная функция f(x)f(x), в следующей
# строке вводятся два целых числа aa и bb, разделенные пробелом, которые представляют
# границы отрезка [a; b][a;b].

# Формат выходных данных
# Программа должна определить минимальное и максимальное значения функции f(x)f(x) на
# отрезке [a; b][a;b] в целых точках и вывести полученный результат в следующем формате:

# Минимальное значение функции <функция f(x)> на отрезке <отрезок> равно <мин. значение>
# Максимальное значение функции <функция f(x)> на отрезке <отрезок> равно <макс. значение>

def eval_equation(value):
    return eval(equation.replace('x', f'({value})'))
    

equation = input()
point_a, point_b = input().split()

all_values = [eval_equation(str(point)) for point in range(int(point_a), int(point_b)+1)]

print(f'Минимальное значение функции {equation} на отрезке [{point_a}; {point_b}] равно {min(all_values)}')
print(f'Максимальное значение функции {equation} на отрезке [{point_a}; {point_b}] равно {max(all_values)}')